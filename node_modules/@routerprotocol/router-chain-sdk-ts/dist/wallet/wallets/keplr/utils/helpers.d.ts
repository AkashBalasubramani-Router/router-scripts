import { ChainId } from '../../../..';
import { Msgs } from '../../../..';
export declare const createEip712StdSignDoc: ({ memo, chainId, accountNumber, timeoutHeight, sequence, gas, msgs, }: {
    memo?: string | undefined;
    chainId: ChainId;
    timeoutHeight?: string | undefined;
    accountNumber: number;
    sequence: number;
    gas?: string | undefined;
    msgs: Msgs[];
}) => {
    chain_id: ChainId;
    timeout_height: string;
    account_number: string;
    sequence: string;
    fee: {
        gas: string;
        amount: {
            amount: string;
            denom: string;
        }[];
    };
    msgs: ({
        type: string;
        value: Pick<import("../../../../core/authz/msgs/MsgGrant").MsgGrant.Amino, "granter" | "grantee" | "grant">;
    } | {
        type: string;
        value: Pick<import("../../../../core/authz/msgs/MsgRevoke").MsgRevoke.Amino, "granter" | "grantee" | "msgTypeUrl">;
    } | {
        type: string;
        value: Pick<import("../../../../core/authz/msgs/MsgExec").MsgExec.Amino, "grantee" | "msgsList">;
    } | {
        type: string;
        value: Pick<import("../../../../core/bank/msgs/MsgSend").MsgSend.Amino, "fromAddress" | "toAddress" | "amountList">;
    } | {
        type: string;
        value: Pick<import("../../../../core/gov/msgs/MsgDeposit").MsgDeposit.Amino, "amountList" | "proposalId" | "depositor">;
    } | {
        type: string;
        value: Pick<import("../../../../core/gov/msgs/MsgSubmitTextProposal").MsgSubmitTextProposal.Amino, "content" | "initialDepositList" | "proposer">;
    } | {
        type: string;
        value: Pick<import("../../../../core/gov/msgs/MsgVote").MsgVote.Amino, "proposalId" | "voter" | "option">;
    } | {
        type: string;
        value: Pick<import("../../../../core/ibc/msgs/MsgTransfer").MsgTransfer.Amino, "timeoutHeight" | "sourcePort" | "sourceChannel" | "token" | "sender" | "receiver" | "timeoutTimestamp">;
    } | {
        type: string;
        value: Pick<import("../../../../core/distribution/msgs/MsgWithdrawDelegatorReward").MsgWithdrawDelegatorReward.Amino, "delegatorAddress" | "validatorAddress">;
    } | {
        type: string;
        value: Pick<import("../../../../core/staking/msgs/MsgBeginRedelegate").MsgBeginRedelegate.Amino, "delegatorAddress" | "amount" | "validatorSrcAddress" | "validatorDstAddress">;
    } | {
        type: string;
        value: Pick<import("../../../../core/wasm/msgs/MsgStoreCode").MsgStoreCode.Amino, "sender" | "wasmByteCode" | "instantiatePermission">;
    } | {
        type: string;
        value: Pick<import("../../../../core/rwasm/msgs/MsgCwStoreCode").MsgCwStoreCode.Amino, "sender" | "wasmByteCode">;
    } | {
        type: string;
        value: Pick<import("../../../../core/wasm/msgs/MsgInstantiateContract").MsgInstantiateContract.Amino, "sender" | "admin" | "codeId" | "label" | "msg" | "fundsList">;
    } | {
        type: string;
        value: Pick<import("../../../../core/rwasm/msgs/MsgInstantiateCwContract").MsgInstantiateCwContract.Amino, "sender" | "admin" | "codeId" | "label" | "msg" | "funds">;
    } | {
        type: string;
        value: Pick<import("../../../../core/wasm/msgs/MsgExecuteContract").MsgExecuteContract.Amino, "sender" | "msg" | "fundsList" | "contract">;
    } | {
        type: string;
        value: Pick<import("../../../../core/rwasm/msgs/MsgExecuteCwContract").MsgExecuteCwContract.Amino, "sender" | "msg" | "funds" | "contract">;
    } | {
        type: string;
        value: Pick<import("../../../../core/wasm/msgs/MsgUpdateAdmin").MsgUpdateAdmin.Amino, "sender" | "contract" | "newAdmin">;
    } | {
        type: string;
        value: Pick<import("../../../../core/wasm/msgs/MsgMigrateContract").MsgMigrateContract.Amino, "sender" | "codeId" | "msg" | "contract">;
    } | {
        type: string;
        value: Pick<import("../../../../core/metastore/msgs/MsgApproveFeepayerRequest").MsgApproveFeepayerRequest.Amino, "chainId" | "feePayer" | "dappAddress">;
    })[];
    memo: string;
};
