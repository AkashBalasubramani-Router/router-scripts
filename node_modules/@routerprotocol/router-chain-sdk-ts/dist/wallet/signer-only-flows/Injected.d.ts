import { Msgs } from '../../core';
/**
 * Executes query on cosmwasm contract on router chain via metamask
 * @param networkEnv - Network Environment of Router Chain
 * @param contractAddress - CosmWasm contract address
 * @param executeMsg - Execution Query
 * @param nodeUrl - LCD node Url
 * @param ethereumAddress - Ethereum address of user
 * @param injectedSigner - Ex- window.ethereum or any injected wallet signer
 * @param funds - if contract requires funds with execution
 * @param memo - String
 * @return {BroadcastResponse}
 * @throws {Error}
 */
export declare const executeQueryInjected: ({ networkEnv, contractAddress, executeMsg, nodeUrl, ethereumAddress, injectedSigner, funds, memo, }: {
    networkEnv: string;
    contractAddress: string;
    executeMsg: Record<string, unknown>;
    nodeUrl: string;
    ethereumAddress: string;
    injectedSigner: any;
    funds?: {
        denom: string;
        amount: string;
    } | undefined;
    memo?: string | undefined;
}) => Promise<any>;
export declare const sendEthTxnToRouterChain: ({ networkEnv, txMsg, nodeUrl, ethereumAddress, injectedSigner, memo, }: {
    networkEnv: string;
    txMsg: Msgs;
    nodeUrl: string;
    ethereumAddress: string;
    injectedSigner: any;
    memo?: string | undefined;
}) => Promise<any>;
