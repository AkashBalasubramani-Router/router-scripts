import { BigNumber } from './classes';
export declare const getSignificantDecimalsFromNumber: (number: BigNumber | number | string) => number;
/**
 * On chain amounts queried from a sentry using the
 * gRPC API are returned with an extra decimal point
 * 18 places from the beginning, so we need to remove it
 * to get a workable amount
 */
export declare const denomAmountFromGrpcChainDenomAmount: (value: string | number | BigNumber) => BigNumber;
/**
 * On chain amounts broadcasted to a sentry directly using the
 * gRPC API should be passed with an extra decimal point
 * 18 places from the beginning, so we need to add it
 * to get a workable amount
 */
export declare const denomAmountToGrpcChainDenomAmount: (value: string | number | BigNumber) => BigNumber;
/**
 * On chain amounts (based on the cosmosSdk.Dec type)
 * broadcasted to a sentry directly using the
 * gRPC API should be passed with an extra decimal point
 * 18 places from the beginning (i.e multiplied by 1e18), so we need to add it
 * to get a workable amount
 */
export declare const amountToCosmosSdkDecAmount: (value: string | number | BigNumber) => BigNumber;
/**
 * Amount that the chain requires is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const denomAmountToChainDenomAmount: ({ value, decimals, }: {
    value: number | string | BigNumber;
    decimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain returns is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const denomAmountToChainDenomAmountToFixed: ({ value, decimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    decimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain returns is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const denomAmountFromChainDenomAmount: ({ value, decimals, }: {
    value: number | string | BigNumber;
    decimals?: string | number | undefined;
}) => BigNumber;
/**
 *
 * Amount that the chain returns is in the x * 10^(quoteDecimals) format
 * where x is a human readable number stringified
 */
export declare const denomAmountFromChainDenomAmountToFixed: ({ value, decimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    decimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain requires is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const derivativeMarginToChainMargin: ({ value, quoteDecimals, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain requires is in the x * 10^(quoteDecimals) format
 * where x is a human readable number stringified
 */
export declare const derivativeMarginToChainMarginToFixed: ({ value, quoteDecimals, decimalPlaces, roundingMode, }: {
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
}) => string;
/**
 * Amount that the chain returns is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const derivativeMarginFromChainMargin: ({ value, quoteDecimals, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain returns is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const derivativeMarginFromChainMarginToFixed: ({ value, quoteDecimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain requires is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const derivativePriceToChainPrice: ({ value, quoteDecimals, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain requires is in the x * 10^(quoteDecimals) format
 * where x is a human readable number stringified
 */
export declare const derivativePriceToChainPriceToFixed: ({ value, quoteDecimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain returns is in the x * 10^(quoteDecimals) format
 * where x is a human readable number
 */
export declare const derivativePriceFromChainPrice: ({ value, quoteDecimals, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain returns is in the x * 10^(quoteDecimals) format
 * where x is a human readable number stringified
 */
export declare const derivativePriceFromChainPriceToFixed: ({ value, quoteDecimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain requires is in the x format
 * where x is a human readable number
 */
export declare const derivativeQuantityToChainQuantity: ({ value, }: {
    value: number | string | BigNumber;
}) => BigNumber;
/**
 * Amount that the chain requires is in the x format
 * where x is a human readable number stringified
 */
export declare const derivativeQuantityToChainQuantityToFixed: ({ value, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain requires is in the x format
 * where x is a human readable number
 */
export declare const derivativeQuantityFromChainQuantity: ({ value, }: {
    value: number | string | BigNumber;
}) => BigNumber;
/**
 * Amount that the chain requires is in the x format
 * where x is a human readable number stringified
 */
export declare const derivativeQuantityFromChainQuantityToFixed: ({ value, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain requires is in the x / 10^(quoteDecimals - baseDecimals) format
 * where x is a human readable number
 */
export declare const spotPriceToChainPrice: ({ value, baseDecimals, quoteDecimals, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
    baseDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain requires is in the x / 10^(quoteDecimals - baseDecimals) format
 * where x is a human readable number stringified
 */
export declare const spotPriceToChainPriceToFixed: ({ value, baseDecimals, quoteDecimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
    baseDecimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain returns is in the x / 10^(quoteDecimals - baseDecimals) format
 * where x is a human readable number
 */
export declare const spotPriceFromChainPrice: ({ value, baseDecimals, quoteDecimals, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
    baseDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain returns is in the x / 10^(quoteDecimals - baseDecimals) format
 * where x is a human readable number stringified
 */
export declare const spotPriceFromChainPriceToFixed: ({ value, baseDecimals, quoteDecimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    quoteDecimals?: string | number | undefined;
    baseDecimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain requires is in the x * 10^(baseDecimals) format
 * where x is a human readable number
 */
export declare const spotQuantityToChainQuantity: ({ value, baseDecimals, }: {
    value: number | string | BigNumber;
    baseDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain requires is in the x * 10^(baseDecimals) format
 * where x is a human readable number
 */
export declare const spotQuantityToChainQuantityToFixed: ({ value, baseDecimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    baseDecimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
/**
 * Amount that the chain returns is in the x * 10^(baseDecimals) format
 * where x is a human readable number
 */
export declare const spotQuantityFromChainQuantity: ({ value, baseDecimals, }: {
    value: number | string | BigNumber;
    baseDecimals?: string | number | undefined;
}) => BigNumber;
/**
 * Amount that the chain returns is in the x * 10^(baseDecimals) format
 * where x is a human readable number
 */
export declare const spotQuantityFromChainQuantityToFixed: ({ value, baseDecimals, decimalPlaces, roundingMode, }: {
    value: number | string | BigNumber;
    baseDecimals?: string | number | undefined;
    decimalPlaces?: number | undefined;
    roundingMode?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | undefined;
}) => string;
export declare const cosmosSdkDecToBigNumber: (number: string | number | BigNumber) => BigNumber;
export declare const numberToCosmosSdkDecString: (value: string | number | BigNumber) => string;
export declare const getDecimalsFromNumber: (number: number | string) => number;
export declare const getTriggerPrice: (triggerPrice?: string | number | undefined) => string;
