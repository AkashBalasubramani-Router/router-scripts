import { ComposerResponse, Web3GatewayMessage } from '../ts-types';
import { Coin as GrpcCoin } from '@routerprotocol/chain-api/cosmos/base/v1beta1/coin_pb';
import { Coin } from '../types';
export declare const sleep: (timeout: number) => Promise<void>;
export declare const isServerSide: () => boolean;
export declare const getWeb3GatewayMessage: <T>(message: T, type: string) => Web3GatewayMessage<T>;
export declare const mapMultipleComposerResponseMessages: <T, R>(messages: ComposerResponse<T, R>[]) => {
    web3GatewayMessage: R[];
    directBroadcastMessage: {
        type: string;
        message: T;
    }[];
};
export declare const objectToJson: (object: Record<string, any>, params?: {
    replacer?: any;
    indentation?: number;
} | undefined) => string;
export declare const protoObjectToJson: (object: any, params?: {
    replacer?: any;
    indentation?: number;
} | undefined) => string;
export declare const grpcCoinToUiCoin: (coin: GrpcCoin) => Coin;
export declare const uint8ArrayToString: (string: string | Uint8Array | null | undefined) => string;
export declare const toPascalCase: (str: string) => string;
export declare const snakeToPascal: (str: string) => string;
