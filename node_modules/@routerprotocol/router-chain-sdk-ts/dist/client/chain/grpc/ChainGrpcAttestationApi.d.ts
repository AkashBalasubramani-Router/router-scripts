import { QueryLatestValsetNonceResponse, QueryAllValsetResponse } from '@routerprotocol/chain-api/attestation/query_pb';
import BaseConsumer from '../../BaseGrpcConsumer';
/**
 * The Attestation module is responsible for Valset (Validator set) and vote management.
 *
 * @group gRPC API
 *
 * @example
 * To use Attestation methods, initialise a {@link ChainGrpcAttestationApi} object to with a gRPC endpoint. An endpoint can be retrieved by using {@link networkEndpoints}.
 * ```ts
 * const endpoint =  getEndpointsForNetwork(Network.Devnet).grpcEndpoint;
 * const client = new ChainGrpcAttestationApi(endpoint.grpcEndpoint);
 * const response = await client.fetchLatestValsetNonce();
 * ```
 */
export declare class ChainGrpcAttestationApi extends BaseConsumer {
    /**
     * Fetch latest valset nonce
     * @returns latest valset nonce.
     */
    fetchLatestValsetNonce(): Promise<QueryLatestValsetNonceResponse.AsObject>;
    /**
     * Fetches all valsets
     * @returns all valsets.
     */
    fetchAllValsets(): Promise<QueryAllValsetResponse.AsObject>;
    /**
     *
     * @param valsetNonce nonce of valset.
     * @returns valset.
     */
    fetchValsetByNonce(valsetNonce: number): Promise<{
        valset: import("@routerprotocol/chain-api/attestation/valset_pb").Valset.AsObject | undefined;
    }>;
    /**
     *
     * @returns latest valset.
     */
    fetchLatestValset(): Promise<{
        valset: import("@routerprotocol/chain-api/attestation/valset_pb").Valset.AsObject | undefined;
    }>;
    /**
     *
     * @param chainType chain type.
     * @param chainId chain ID.
     * @param valAddress validator address.
     * @returns last event nonce for a validator.
     */
    fetchLastEventByValidator(chainId: string, valAddress: string): Promise<{
        eventNonce: number;
    }>;
    /**
     *
     * @returns list of all orchestrators.
     */
    fetchAllOrchestrators(): Promise<{
        orchestrator_set: import("@routerprotocol/chain-api/attestation/tx_pb").MsgSetOrchestratorAddress.AsObject[];
    }>;
}
