import BaseConsumer from '../../BaseGrpcConsumer';
import { PaginationOption } from '../../../types/pagination';
/**
 * @group gRPC API
 */
export declare class ChainGrpcStakingApi extends BaseConsumer {
    fetchModuleParams(): Promise<import("..").StakingModuleParams>;
    fetchPool(): Promise<import("..").Pool>;
    fetchValidators(): Promise<{
        validators: import("..").Validator[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchValidator(address: string): Promise<import("..").Validator>;
    fetchValidatorDelegations({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("..").Delegation[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchValidatorDelegationsNoThrow({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("..").Delegation[];
        pagination: import("../../../types/pagination").Pagination;
    } | {
        delegations: never[];
        pagination: {
            total: number;
            next: string;
        };
    }>;
    fetchValidatorUnbondingDelegations({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("..").UnBondingDelegation[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchValidatorUnbondingDelegationsNoThrow({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("..").UnBondingDelegation[];
        pagination: import("../../../types/pagination").Pagination;
    } | {
        unbondingDelegations: never[];
        pagination: {
            total: number;
            next: string;
        };
    }>;
    fetchDelegation({ routerAddress, validatorAddress, }: {
        routerAddress: string;
        validatorAddress: string;
    }): Promise<import("..").Delegation>;
    fetchDelegations({ routerAddress, pagination, }: {
        routerAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("..").Delegation[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchDelegationsNoThrow({ routerAddress, pagination, }: {
        routerAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("..").Delegation[];
        pagination: import("../../../types/pagination").Pagination;
    } | {
        delegations: never[];
        pagination: {
            total: number;
            next: string;
        };
    }>;
    fetchDelegators({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("..").Delegation[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchDelegatorsNoThrow({ validatorAddress, pagination, }: {
        validatorAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        delegations: import("..").Delegation[];
        pagination: import("../../../types/pagination").Pagination;
    } | {
        delegations: never[];
        pagination: {
            total: number;
            next: string;
        };
    }>;
    fetchUnbondingDelegations({ routerAddress, pagination, }: {
        routerAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("..").UnBondingDelegation[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchUnbondingDelegationsNoThrow({ routerAddress, pagination, }: {
        routerAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        unbondingDelegations: import("..").UnBondingDelegation[];
        pagination: import("../../../types/pagination").Pagination;
    } | {
        unbondingDelegations: never[];
        pagination: {
            total: number;
            next: string;
        };
    }>;
    fetchReDelegations({ routerAddress, pagination, }: {
        routerAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        redelegations: import("..").ReDelegation[];
        pagination: import("../../../types/pagination").Pagination;
    }>;
    fetchReDelegationsNoThrow({ routerAddress, pagination, }: {
        routerAddress: string;
        pagination?: PaginationOption;
    }): Promise<{
        redelegations: import("..").ReDelegation[];
        pagination: import("../../../types/pagination").Pagination;
    } | {
        redelegations: never[];
        pagination: {
            total: number;
            next: string;
        };
    }>;
}
