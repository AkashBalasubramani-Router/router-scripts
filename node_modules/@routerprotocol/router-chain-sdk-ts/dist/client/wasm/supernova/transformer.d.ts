import { WasmContractQueryResponse } from './types';
/**
 * @hidden
 */
export declare class SupernovaQueryTransformer {
    static masterContractConfigResponseToMasterContractConfig(response: WasmContractQueryResponse): {
        distributionContract: string;
        ninjaToken: string;
        owner: string;
    };
    static vaultContractConfigResponseToDerivativeVaultConfig(response: WasmContractQueryResponse): {
        cw20CodeId: string;
        cw20Label: string;
        defaultMidPriceVolatilityRatio: string;
        emergencyOracleVolatilitySampleSize: string;
        headChangeToleranceRatio: string;
        headToTailDeviationRatio: string;
        lastValidMarkPrice: string;
        leverage: string;
        leveragedActiveCapitalToMaxPositionExposureRatio: string;
        lpName: string;
        lpSymbol: string;
        lpTokenAddress: string;
        marketId: string;
        masterAddress: string;
        maxActiveCapitalUtilizationRatio: string;
        minOracleVolatilitySampleSize: string;
        minProximityToLiquidation: string;
        minTradeVolatilitySampleSize: string;
        minVolatilityRatio: string;
        oracleVolatilityGroupSec: string;
        orderDensity: string;
        postReductionPercOfMaxPosition: string;
        reservationPriceSensitivityRatio: string;
        reservationSpreadSensitivityRatio: string;
        tradeVolatilityGroupSec: string;
        cw20MarketingInfo: any;
        feeRecipient: string;
        owner: string;
        subaccountId: string;
    };
    static vaultContractConfigResponseToSpotVaultContractConfig(response: WasmContractQueryResponse): {
        balanceReduceRatio: string;
        cw20CodeId: string;
        cw20Label: string;
        defaultMidPriceVolatilityRatio: string;
        firstThreshold: string;
        headChangeToleranceRatio: string;
        lpName: string;
        lpSymbol: string;
        lpTokenAddress: string;
        marketId: string;
        marketOrderLowerBoundRatio: string;
        marketOrderUpperBoundRatio: string;
        masterAddress: string;
        maxActiveCapitalUtilizationRatio: string;
        maxAvgOrdersPriceDeviationRatio: string;
        midPriceTailDeviationRatio: string;
        minHeadToMidDeviationRatio: string;
        minHeadToTailDeviationRatio: string;
        minTradeVolatilitySampleSize: string;
        orderDensity: string;
        reduceProportion: string;
        reservationPriceSensitivityRatio: string;
        reservationSpreadSensitivityRatio: string;
        secondThreshold: string;
        tradeVolatilityGroupCount: string;
        tradeVolatilityGroupSec: string;
        cw20MarketingInfo: any;
        feeRecipient: string;
        owner: string;
        subaccountId: string;
    };
    static vaultUserLpAllowanceResponseToVaultUserLpAllowance(response: WasmContractQueryResponse): {
        allowance: string;
    };
    static vaultMarketIdResponseToVaultMarketId(response: WasmContractQueryResponse): {
        marketId: string;
    };
    static vaultTotalLpSupplyResponseToVaultTotalLpSupply(response: WasmContractQueryResponse): {
        totalSupply: string;
    };
    static vaultUserLpBalanceResponseToVaultUserLpBalance(response: WasmContractQueryResponse): {
        balance: string;
    };
    static registeredVaultsResponseToRegisteredVaults(response: WasmContractQueryResponse): {
        masterSubaccountId: string;
        vaultAddress: string;
    }[];
}
