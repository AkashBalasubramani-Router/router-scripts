import { MsgApproveFeepayerRequest as BaseMsgApproveFeepayerRequest } from '@routerprotocol/chain-api/metastore/tx_pb';
import { MsgBase } from '../../MsgBase';
export declare namespace MsgApproveFeepayerRequest {
    interface Params {
        feepayer: string;
        chainid: string;
        dappaddresses: string;
    }
    interface DirectSign {
        type: '/routerprotocol.routerchain.metastore.MsgApproveFeepayerRequest';
        message: BaseMsgApproveFeepayerRequest;
    }
    interface Data extends BaseMsgApproveFeepayerRequest.AsObject {
        '@type': '/routerprotocol.routerchain.metastore.MsgApproveFeepayerRequest';
    }
    interface Amino extends BaseMsgApproveFeepayerRequest.AsObject {
        type: 'metastore/ApproveFeepayerRequest';
    }
    interface Web3 extends BaseMsgApproveFeepayerRequest.AsObject {
        '@type': '/routerprotocol.routerchain.metastore.MsgApproveFeepayerRequest';
    }
    type Proto = BaseMsgApproveFeepayerRequest;
}
/**
 * @group Message
 */
export default class MsgApproveFeepayerRequest extends MsgBase<MsgApproveFeepayerRequest.Params, MsgApproveFeepayerRequest.Data, MsgApproveFeepayerRequest.Proto, MsgApproveFeepayerRequest.Amino, MsgApproveFeepayerRequest.DirectSign> {
    static fromJSON(params: MsgApproveFeepayerRequest.Params): MsgApproveFeepayerRequest;
    toProto(): MsgApproveFeepayerRequest.Proto;
    toData(): MsgApproveFeepayerRequest.Data;
    toAmino(): MsgApproveFeepayerRequest.Amino;
    toWeb3(): MsgApproveFeepayerRequest.Web3;
    toDirectSign(): MsgApproveFeepayerRequest.DirectSign;
}
