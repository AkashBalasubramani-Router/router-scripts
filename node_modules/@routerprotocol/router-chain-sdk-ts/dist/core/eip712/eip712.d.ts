import { EthereumChainId } from '../../ts-types';
import { Msgs } from '../msgs';
import { Eip712ConvertFeeArgs, Eip712ConvertTxArgs } from './types';
export declare const getEip712TypedData: ({ msgs, tx, fee, ethereumChainId, }: {
    msgs: Msgs | Msgs[];
    tx: Eip712ConvertTxArgs;
    fee?: Eip712ConvertFeeArgs | undefined;
    ethereumChainId: EthereumChainId;
}) => {
    message: {
        msgs: ({
            type: string;
            value: Pick<import("../authz/msgs/MsgGrant").MsgGrant.Amino, "granter" | "grantee" | "grant">;
        } | {
            type: string;
            value: Pick<import("../authz/msgs/MsgRevoke").MsgRevoke.Amino, "granter" | "grantee" | "msgTypeUrl">;
        } | {
            type: string;
            value: Pick<import("../authz/msgs/MsgExec").MsgExec.Amino, "grantee" | "msgsList">;
        } | {
            type: string;
            value: Pick<import("../bank/msgs/MsgSend").MsgSend.Amino, "fromAddress" | "toAddress" | "amountList">;
        } | {
            type: string;
            value: Pick<import("../gov/msgs/MsgDeposit").MsgDeposit.Amino, "amountList" | "proposalId" | "depositor">;
        } | {
            type: string;
            value: Pick<import("../gov/msgs/MsgSubmitTextProposal").MsgSubmitTextProposal.Amino, "content" | "initialDepositList" | "proposer">;
        } | {
            type: string;
            value: Pick<import("../gov/msgs/MsgVote").MsgVote.Amino, "proposalId" | "voter" | "option">;
        } | {
            type: string;
            value: Pick<import("../ibc/msgs/MsgTransfer").MsgTransfer.Amino, "sourcePort" | "sourceChannel" | "token" | "sender" | "receiver" | "timeoutHeight" | "timeoutTimestamp">;
        } | {
            type: string;
            value: Pick<import("../distribution/msgs/MsgWithdrawDelegatorReward").MsgWithdrawDelegatorReward.Amino, "delegatorAddress" | "validatorAddress">;
        } | {
            type: string;
            value: Pick<import("../staking/msgs/MsgBeginRedelegate").MsgBeginRedelegate.Amino, "amount" | "delegatorAddress" | "validatorSrcAddress" | "validatorDstAddress">;
        } | {
            type: string;
            value: Pick<import("../wasm/msgs/MsgStoreCode").MsgStoreCode.Amino, "sender" | "wasmByteCode" | "instantiatePermission">;
        } | {
            type: string;
            value: Pick<import("../rwasm/msgs/MsgCwStoreCode").MsgCwStoreCode.Amino, "sender" | "wasmByteCode">;
        } | {
            type: string;
            value: Pick<import("../wasm/msgs/MsgInstantiateContract").MsgInstantiateContract.Amino, "sender" | "admin" | "codeId" | "label" | "msg" | "fundsList">;
        } | {
            type: string;
            value: Pick<import("../rwasm/msgs/MsgInstantiateCwContract").MsgInstantiateCwContract.Amino, "sender" | "admin" | "codeId" | "label" | "msg" | "funds">;
        } | {
            type: string;
            value: Pick<import("../wasm/msgs/MsgExecuteContract").MsgExecuteContract.Amino, "sender" | "msg" | "fundsList" | "contract">;
        } | {
            type: string;
            value: Pick<import("../rwasm/msgs/MsgExecuteCwContract").MsgExecuteCwContract.Amino, "sender" | "msg" | "funds" | "contract">;
        } | {
            type: string;
            value: Pick<import("../wasm/msgs/MsgUpdateAdmin").MsgUpdateAdmin.Amino, "sender" | "contract" | "newAdmin">;
        } | {
            type: string;
            value: Pick<import("../wasm/msgs/MsgMigrateContract").MsgMigrateContract.Amino, "sender" | "codeId" | "msg" | "contract">;
        } | {
            type: string;
            value: Pick<import("../metastore/msgs/MsgApproveFeepayerRequest").MsgApproveFeepayerRequest.Amino, "chainId" | "feePayer" | "dappAddress">;
        })[];
        fee: {
            amount: {
                amount: string;
                denom: string;
            }[];
            gas: string;
            feePayer?: string | undefined;
        };
        account_number: string;
        chain_id: string;
        sequence: string;
        memo: string;
    };
    domain: {
        name: string;
        version: string;
        chainId: EthereumChainId;
        salt: string;
        verifyingContract: string;
    };
    types: {
        EIP712Domain: {
            name: string;
            type: string;
        }[];
        Tx: {
            name: string;
            type: string;
        }[];
        Fee: {
            name: string;
            type: string;
        }[];
        Coin: {
            name: string;
            type: string;
        }[];
        Msg: {
            name: string;
            type: string;
        }[];
    };
    primaryType: string;
};
