export declare const latestBlockQuery = "query getLatestBlocks($limit: Int!, $timeRange:[Int],$offset: Int!){\n  paginatedBlock(sortBy:{_id:desc},filter:{timestamp:{range:$timeRange}},limit:$limit,offset:$offset){\n    totalRecords\n    blocks{\n      _id\n      hash\n      proposer\n      txn_count\n      timestamp\n    }\n  }\n}\n";
export declare const latestBlockQueryWithSignatures = "query getLatestBlocks($limit: Int!, $timeRange:[Int],$offset: Int!){\n  paginatedBlock(sortBy:{_id:desc},filter:{timestamp:{range:$timeRange}},limit:$limit,offset:$offset){\n    totalRecords\n    blocks{\n      _id\n      hash\n      proposer\n      txn_count\n      timestamp\n      signatures{\n      validatorAddress\n      timestamp\n    }\n    }\n  }\n}\n";
export declare const specificBlockQuery = "\n  query getBlockByHeight($height: Int!){\n  block(_id:$height){\n    _id\n    hash\n    proposer\n    txn_count\n    timestamp\n    signatures{\n      validatorAddress\n      timestamp\n    }\n    transactions{\n         _id\n        height\n        sender\n        status\n        receiver\n        timestamp\n        gasWanted\n        gasUsed\n        fee\n        event_logs\n        success\n        rawLog\n        routePrice\n    }\n  }\n}\n";
export declare const latestTransactionsQuery = "\n  query getLatestTransactions($timeRange:[Int], $limit: Int!, $offset: Int!){\n    paginatedTransaction(filter:{timestamp:{range:$timeRange}},sortBy:{height:desc},limit:$limit,offset:$offset){\n    totalRecords\n  transactions{\n     _id\n    height\n    sender\n    status\n    receiver\n    timestamp\n    gasWanted\n    gasUsed\n    fee\n    event_logs\n    success\n    rawLog\n    routePrice\n  }\n  }\n}\n";
export declare const latestTransactionsOfAddressQuery = "\n  query getLatestTransactions($timeRange:[Int], $address: String!,$limit: Int!, $offset: Int!){\n   paginatedTransaction(filter:{timestamp:{range:$timeRange}}, where_or:{sender:$address, receiver:$address}, limit:$limit, offset:$offset){\n    totalRecords\n    transactions{\n      _id\n      height\n      sender\n      status\n      receiver\n      timestamp\n      gasWanted\n      gasUsed\n      fee\n      event_logs\n      success\n      rawLog\n      routePrice\n    }\n  }\n}\n";
export declare const specificTransactionQuery = "\n  query getTransactionByHash($hash: String!){\n  transaction(_id:$hash){\n    _id\n    height\n    sender\n    status\n    receiver\n    timestamp\n    gasWanted\n    gasUsed\n    fee\n    event_logs\n    success\n    rawLog\n    routePrice\n  }\n}\n";
export declare const latestCrosschainsQuery = "\n  query getLatestCrosschains($timeRange:[Int], $limit: Int!, $offset: Int!){\n    paginatedCrosschain(filter:{createdAt:{range:$timeRange}}, sortBy:{createdAt:desc}, limit:$limit, offset:$offset){\n    totalRecords\n    crosschains{\n      id\n      attestationId\n      srcChainId\n      requestIdentifier\n      blockHeight\n      sourceTxHash\n      srcTimestamp\n      srcTxOrigin\n      routeAmount\n      routeRecipient\n      destChainId\n      requestSender\n      requestMetadata{\n        destGasLimit\n        destGasPrice\n        ackGasLimit\n        ackGasPrice\n        ackType\n        isReadCall\n        asmAddress\n      }\n      requestPacket{\n        handler\n        payload\n      }\n      srcChainType\n      destChainType\n      status\n      eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      ackRequest{\n        eventAckRequestCreated{\n          attestationId\n          ackSrcChainId\n          ackRequestIdentifier\n          blockHeight\n          destTxHash\n          relayerRouterAddress\n          ackDestChainId\n          requestSender\n          requestIdentifier\n          ackSrcChainType\n          ackDestChainType\n          execData\n          execStatus\n          status\n        }\n        eventAckRequestConfirm{\n          ackSrcChainId\n          ackRequestIdentifier\n          claimHash\n          ethSigner\n          signature\n          orchestrator\n        }\n        status\n        eventHistory{\n          name\n          height\n          timestamp\n          txnHash\n          height\n        }\n        historyStatus{\n          status\n          txnHash\n          timestamp\n        }\n        claimHash\n        txFeeInRoute\n        chainType\n        chainId\n        requestIdentifier\n        customFormAttestationId\n        ackReceiptRequest{\n          ackReceipt{\n            attestationId\n            ackReceiptSrcChainId\n            ackReceiptIdentifier\n            ackReceiptBlockHeight\n            ackReceiptTxHash\n            relayerRouterAddress\n            requestIdentifier\n            status\n          }\n          historyStatus{\n            status\n            txnHash\n            timestamp\n          }\n          relayerFeeInRoute\n          refundFeeInRoute\n          ackReceiptKey\n          status\n          claimHash\n        }\n        ackGasLimit\n        ackGasPrice\n        feePayer\n        relayerFeeInRoute\n        relayerIncentiveInRoute\n        refundFeeInRoute\n        errorResponse\n        eventSignatures{\n          chainType\n          chainId\n          eventNonce\n          voter\n          blockHeight\n          timestamp\n        }\n      }\n      customFormAttestationId\n      destinationTxHash\n      eventAckConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      createdAt\n      updatedAt\n      destTxFeeInRoute\n      relayerFee\n\t\t\trelayerFeeInRoute\n      relayerIncentiveInRoute\n      refundFeeInRoute\n      feePayer\n      errorResponse\n      relayerAddress\n      execStatus\n      execData\n      eventSignatures{\n        chainType\n        chainId\n        eventNonce\n        voter\n        blockHeight\n        timestamp\n      }\n    }\n    }\n}\n";
export declare const specificCrosschainQuery = "\n  query getCrosschainByFormAttestationId($formAttestationId: String!){\n  crosschain(id:$formAttestationId){\n    id\n      attestationId\n      srcChainId\n      requestIdentifier\n      blockHeight\n      sourceTxHash\n      srcTimestamp\n      srcTxOrigin\n      routeAmount\n      routeRecipient\n      destChainId\n      requestSender\n      requestMetadata{\n        destGasLimit\n        destGasPrice\n        ackGasLimit\n        ackGasPrice\n        ackType\n        isReadCall\n        asmAddress\n      }\n      requestPacket{\n        handler\n        payload\n      }\n      srcChainType\n      destChainType\n      status\n      eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      ackRequest{\n        eventAckRequestCreated{\n          attestationId\n          ackSrcChainId\n          ackRequestIdentifier\n          blockHeight\n          destTxHash\n          relayerRouterAddress\n          ackDestChainId\n          requestSender\n          requestIdentifier\n          ackSrcChainType\n          ackDestChainType\n          execData\n          execStatus\n          status\n        }\n        eventAckRequestConfirm{\n          ackSrcChainId\n          ackRequestIdentifier\n          claimHash\n          ethSigner\n          signature\n          orchestrator\n        }\n        status\n        eventHistory{\n          name\n          height\n          timestamp\n          txnHash\n          height\n        }\n        historyStatus{\n          status\n          txnHash\n          timestamp\n        }\n        claimHash\n        txFeeInRoute\n        chainType\n        chainId\n        requestIdentifier\n        customFormAttestationId\n        ackReceiptRequest{\n          ackReceipt{\n            attestationId\n            ackReceiptSrcChainId\n            ackReceiptIdentifier\n            ackReceiptBlockHeight\n            ackReceiptTxHash\n            relayerRouterAddress\n            requestIdentifier\n            status\n          }\n          historyStatus{\n            status\n            txnHash\n            timestamp\n          }\n          relayerFeeInRoute\n          refundFeeInRoute\n          ackReceiptKey\n          status\n          claimHash\n        }\n        ackGasLimit\n        ackGasPrice\n        feePayer\n        relayerFeeInRoute\n        relayerIncentiveInRoute\n        refundFeeInRoute\n        errorResponse\n        eventSignatures{\n          chainType\n          chainId\n          eventNonce\n          voter\n          blockHeight\n          timestamp\n        }\n      }\n      customFormAttestationId\n      destinationTxHash\n      eventAckConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      createdAt\n      updatedAt\n      destTxFeeInRoute\n      relayerFee\n\t\t\trelayerFeeInRoute\n      relayerIncentiveInRoute\n      refundFeeInRoute\n      feePayer\n      errorResponse\n      relayerAddress\n      execStatus\n      execData\n      eventSignatures{\n        chainType\n        chainId\n        eventNonce\n        voter\n        blockHeight\n        timestamp\n      }\n  }\n}\n";
export declare const searchSpecificCrosschainQuery = "\n  query getCrosschainByFormAttestationId($timeRange:[Int], $searchTerm: String! , $handlerAddress: String!, $limit: Int!, $offset: Int!){\n  paginatedCrosschain(filter:{createdAt:{range:$timeRange}},where_or:{sourceTxHash:$searchTerm, srcTxOrigin:$searchTerm, requestSender:$searchTerm},handlerAddress:$handlerAddress,sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    crosschains{\n      id\n      attestationId\n      srcChainId\n      requestIdentifier\n      blockHeight\n      sourceTxHash\n      srcTimestamp\n      srcTxOrigin\n      routeAmount\n      routeRecipient\n      destChainId\n      requestSender\n      requestMetadata{\n        destGasLimit\n        destGasPrice\n        ackGasLimit\n        ackGasPrice\n        ackType\n        isReadCall\n        asmAddress\n      }\n      requestPacket{\n        handler\n        payload\n      }\n      srcChainType\n      destChainType\n      status\n      eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      ackRequest{\n        eventAckRequestCreated{\n          attestationId\n          ackSrcChainId\n          ackRequestIdentifier\n          blockHeight\n          destTxHash\n          relayerRouterAddress\n          ackDestChainId\n          requestSender\n          requestIdentifier\n          ackSrcChainType\n          ackDestChainType\n          execData\n          execStatus\n          status\n        }\n        eventAckRequestConfirm{\n          ackSrcChainId\n          ackRequestIdentifier\n          claimHash\n          ethSigner\n          signature\n          orchestrator\n        }\n        status\n        eventHistory{\n          name\n          height\n          timestamp\n          txnHash\n          height\n        }\n        historyStatus{\n          status\n          txnHash\n          timestamp\n        }\n        claimHash\n        txFeeInRoute\n        chainType\n        chainId\n        requestIdentifier\n        customFormAttestationId\n        ackReceiptRequest{\n          ackReceipt{\n            attestationId\n            ackReceiptSrcChainId\n            ackReceiptIdentifier\n            ackReceiptBlockHeight\n            ackReceiptTxHash\n            relayerRouterAddress\n            requestIdentifier\n            status\n          }\n          historyStatus{\n            status\n            txnHash\n            timestamp\n          }\n          relayerFeeInRoute\n          refundFeeInRoute\n          ackReceiptKey\n          status\n          claimHash\n        }\n        ackGasLimit\n        ackGasPrice\n        feePayer\n        relayerFeeInRoute\n        relayerIncentiveInRoute\n        refundFeeInRoute\n        errorResponse\n        eventSignatures{\n          chainType\n          chainId\n          eventNonce\n          voter\n          blockHeight\n          timestamp\n        }\n      }\n      customFormAttestationId\n      destinationTxHash\n      eventAckConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      createdAt\n      updatedAt\n      destTxFeeInRoute\n      relayerFee\n\t\t\trelayerFeeInRoute\n      relayerIncentiveInRoute\n      refundFeeInRoute\n      feePayer\n      errorResponse\n      relayerAddress\n      execStatus\n      execData\n      eventSignatures{\n        chainType\n        chainId\n        eventNonce\n        voter\n        blockHeight\n        timestamp\n      }\n    }\n    }\n}\n";
export declare const searchSpecificCrosschainSrcChainIdQuery = "\n  query getCrosschainByFormAttestationId($timeRange:[Int],$sourceChainIds: [String],$handlerAddress: String!,$searchTerm: String! ,$limit: Int!, $offset: Int!){\n  paginatedCrosschain(filter:{srcChainId:{in:$sourceChainIds}, createdAt:{range:$timeRange}},where_or:{sourceTxHash:$searchTerm, srcTxOrigin:$searchTerm, requestSender:$searchTerm},handlerAddress:$handlerAddress,sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    crosschains{\n      id\n      attestationId\n      srcChainId\n      requestIdentifier\n      blockHeight\n      sourceTxHash\n      srcTimestamp\n      srcTxOrigin\n      routeAmount\n      routeRecipient\n      destChainId\n      requestSender\n      requestMetadata{\n        destGasLimit\n        destGasPrice\n        ackGasLimit\n        ackGasPrice\n        ackType\n        isReadCall\n        asmAddress\n      }\n      requestPacket{\n        handler\n        payload\n      }\n      srcChainType\n      destChainType\n      status\n      eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      ackRequest{\n        eventAckRequestCreated{\n          attestationId\n          ackSrcChainId\n          ackRequestIdentifier\n          blockHeight\n          destTxHash\n          relayerRouterAddress\n          ackDestChainId\n          requestSender\n          requestIdentifier\n          ackSrcChainType\n          ackDestChainType\n          execData\n          execStatus\n          status\n        }\n        eventAckRequestConfirm{\n          ackSrcChainId\n          ackRequestIdentifier\n          claimHash\n          ethSigner\n          signature\n          orchestrator\n        }\n        status\n        eventHistory{\n          name\n          height\n          timestamp\n          txnHash\n          height\n        }\n        historyStatus{\n          status\n          txnHash\n          timestamp\n        }\n        claimHash\n        txFeeInRoute\n        chainType\n        chainId\n        requestIdentifier\n        customFormAttestationId\n        ackReceiptRequest{\n          ackReceipt{\n            attestationId\n            ackReceiptSrcChainId\n            ackReceiptIdentifier\n            ackReceiptBlockHeight\n            ackReceiptTxHash\n            relayerRouterAddress\n            requestIdentifier\n            status\n          }\n          historyStatus{\n            status\n            txnHash\n            timestamp\n          }\n          relayerFeeInRoute\n          refundFeeInRoute\n          ackReceiptKey\n          status\n          claimHash\n        }\n        ackGasLimit\n        ackGasPrice\n        feePayer\n        relayerFeeInRoute\n        relayerIncentiveInRoute\n        refundFeeInRoute\n        errorResponse\n        eventSignatures{\n          chainType\n          chainId\n          eventNonce\n          voter\n          blockHeight\n          timestamp\n        }\n      }\n      customFormAttestationId\n      destinationTxHash\n      eventAckConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      createdAt\n      updatedAt\n      destTxFeeInRoute\n      relayerFee\n\t\t\trelayerFeeInRoute\n      relayerIncentiveInRoute\n      refundFeeInRoute\n      feePayer\n      errorResponse\n      relayerAddress\n      execStatus\n      execData\n      eventSignatures{\n        chainType\n        chainId\n        eventNonce\n        voter\n        blockHeight\n        timestamp\n      }\n    }\n    }\n}\n";
export declare const searchSpecificCrosschainDestChainIdQuery = "\n  query getCrosschainByFormAttestationId($timeRange:[Int],$destinationChainIds: [String],$searchTerm: String! , $handlerAddress: String!,$limit: Int!, $offset: Int!){\n  paginatedCrosschain(filter:{destChainId:{in:$destinationChainIds},createdAt:{range:$timeRange}},where_or:{sourceTxHash:$searchTerm, srcTxOrigin:$searchTerm, requestSender:$searchTerm},handlerAddress:$handlerAddress,sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    crosschains{\n     id\n      attestationId\n      srcChainId\n      requestIdentifier\n      blockHeight\n      sourceTxHash\n      srcTimestamp\n      srcTxOrigin\n      routeAmount\n      routeRecipient\n      destChainId\n      requestSender\n      requestMetadata{\n        destGasLimit\n        destGasPrice\n        ackGasLimit\n        ackGasPrice\n        ackType\n        isReadCall\n        asmAddress\n      }\n      requestPacket{\n        handler\n        payload\n      }\n      srcChainType\n      destChainType\n      status\n      eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      ackRequest{\n        eventAckRequestCreated{\n          attestationId\n          ackSrcChainId\n          ackRequestIdentifier\n          blockHeight\n          destTxHash\n          relayerRouterAddress\n          ackDestChainId\n          requestSender\n          requestIdentifier\n          ackSrcChainType\n          ackDestChainType\n          execData\n          execStatus\n          status\n        }\n        eventAckRequestConfirm{\n          ackSrcChainId\n          ackRequestIdentifier\n          claimHash\n          ethSigner\n          signature\n          orchestrator\n        }\n        status\n        eventHistory{\n          name\n          height\n          timestamp\n          txnHash\n          height\n        }\n        historyStatus{\n          status\n          txnHash\n          timestamp\n        }\n        claimHash\n        txFeeInRoute\n        chainType\n        chainId\n        requestIdentifier\n        customFormAttestationId\n        ackReceiptRequest{\n          ackReceipt{\n            attestationId\n            ackReceiptSrcChainId\n            ackReceiptIdentifier\n            ackReceiptBlockHeight\n            ackReceiptTxHash\n            relayerRouterAddress\n            requestIdentifier\n            status\n          }\n          historyStatus{\n            status\n            txnHash\n            timestamp\n          }\n          relayerFeeInRoute\n          refundFeeInRoute\n          ackReceiptKey\n          status\n          claimHash\n        }\n        ackGasLimit\n        ackGasPrice\n        feePayer\n        relayerFeeInRoute\n        relayerIncentiveInRoute\n        refundFeeInRoute\n        errorResponse\n        eventSignatures{\n          chainType\n          chainId\n          eventNonce\n          voter\n          blockHeight\n          timestamp\n        }\n      }\n      customFormAttestationId\n      destinationTxHash\n      eventAckConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      createdAt\n      updatedAt\n      destTxFeeInRoute\n      relayerFee\n\t\t\trelayerFeeInRoute\n      relayerIncentiveInRoute\n      refundFeeInRoute\n      feePayer\n      errorResponse\n      relayerAddress\n      execStatus\n      execData\n      eventSignatures{\n        chainType\n        chainId\n        eventNonce\n        voter\n        blockHeight\n        timestamp\n      }\n    }\n    }\n}\n";
export declare const searchSpecificCrosschainChainIdQuery = "\n  query getCrosschainByFormAttestationId($timeRange:[Int], $sourceChainIds: [String],$destinationChainIds: [String],$searchTerm: String! , $handlerAddress: String!,$limit: Int!, $offset: Int!){\n  paginatedCrosschain(filter:{srcChainId:{in:$sourceChainIds},destChainId:{in:$destinationChainIds}, createdAt:{range:$timeRange}},where_or:{sourceTxHash:$searchTerm, srcTxOrigin:$searchTerm, requestSender:$searchTerm},handlerAddress:$handlerAddress,sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    crosschains{\n      id\n      attestationId\n      srcChainId\n      requestIdentifier\n      blockHeight\n      sourceTxHash\n      srcTimestamp\n      srcTxOrigin\n      routeAmount\n      routeRecipient\n      destChainId\n      requestSender\n      requestMetadata{\n        destGasLimit\n        destGasPrice\n        ackGasLimit\n        ackGasPrice\n        ackType\n        isReadCall\n        asmAddress\n      }\n      requestPacket{\n        handler\n        payload\n      }\n      srcChainType\n      destChainType\n      status\n      eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      ackRequest{\n        eventAckRequestCreated{\n          attestationId\n          ackSrcChainId\n          ackRequestIdentifier\n          blockHeight\n          destTxHash\n          relayerRouterAddress\n          ackDestChainId\n          requestSender\n          requestIdentifier\n          ackSrcChainType\n          ackDestChainType\n          execData\n          execStatus\n          status\n        }\n        eventAckRequestConfirm{\n          ackSrcChainId\n          ackRequestIdentifier\n          claimHash\n          ethSigner\n          signature\n          orchestrator\n        }\n        status\n        eventHistory{\n          name\n          height\n          timestamp\n          txnHash\n          height\n        }\n        historyStatus{\n          status\n          txnHash\n          timestamp\n        }\n        claimHash\n        txFeeInRoute\n        chainType\n        chainId\n        requestIdentifier\n        customFormAttestationId\n        ackReceiptRequest{\n          ackReceipt{\n            attestationId\n            ackReceiptSrcChainId\n            ackReceiptIdentifier\n            ackReceiptBlockHeight\n            ackReceiptTxHash\n            relayerRouterAddress\n            requestIdentifier\n            status\n          }\n          historyStatus{\n            status\n            txnHash\n            timestamp\n          }\n          relayerFeeInRoute\n          refundFeeInRoute\n          ackReceiptKey\n          status\n          claimHash\n        }\n        ackGasLimit\n        ackGasPrice\n        feePayer\n        relayerFeeInRoute\n        relayerIncentiveInRoute\n        refundFeeInRoute\n        errorResponse\n        eventSignatures{\n          chainType\n          chainId\n          eventNonce\n          voter\n          blockHeight\n          timestamp\n        }\n      }\n      customFormAttestationId\n      destinationTxHash\n      eventAckConfirmSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      createdAt\n      updatedAt\n      destTxFeeInRoute\n      relayerFee\n\t\t\trelayerFeeInRoute\n      relayerIncentiveInRoute\n      refundFeeInRoute\n      feePayer\n      errorResponse\n      relayerAddress\n      execStatus\n      execData\n      eventSignatures{\n        chainType\n        chainId\n        eventNonce\n        voter\n        blockHeight\n        timestamp\n      }\n    }\n    }\n}\n";
export declare const inboundOutboundQuery = "\nquery findOutboundsToInbound($middlewareContract:String!,$inboundId:String!){\n  outboundToInboundMap(where:{middlewareContract:$middlewareContract, inboundId:$inboundId}){\n    inboundId\n    outboundId\n    inboundNonce\n    outboundChainId\n    outboundNonce\n    middlewareContract\n    blockHeight\n    timestamp\n  }\n}\n";
export declare const latestFundPaidQuery = "\n  query getLatestFundPaid($timeRange:[Int], $limit: Int!, $offset: Int!){\n    paginatedFundPaid(filter:{createdAt:{range:$timeRange}}, sortBy:{createdAt:desc}, limit:$limit, offset:$offset){\n    totalRecords\n    fundPaid{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      eventNonce\n      blockHeight\n      messageHash\n      forwarder\n      forwarderRouterAddr\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n";
export declare const specificFundPaidQuery = "\n  query getFundPaidById($id:String!){\n  fundPaid(id:$id){\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      eventNonce\n      blockHeight\n      messageHash\n      forwarder\n      forwarderRouterAddr\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n}\n";
export declare const searchSpecificFundPaidQuery = "\n  query getFundPaidBySearch($timeRange:[Int], $searchTerm: String! ,$limit: Int!, $offset: Int!){\n  paginatedFundPaid(filter:{createdAt:{range:$timeRange}},where_or:{srcTxHash:$searchTerm, contract:$searchTerm, messageHash:$searchTerm, forwarder:$searchTerm, forwarderRouterAddr:$searchTerm},sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    fundPaid{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      eventNonce\n      blockHeight\n      messageHash\n      forwarder\n      forwarderRouterAddr\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n";
export declare const searchSpecificFundPaidSrcChainIdQuery = "\n  query getCrosschainBySearch($timeRange:[Int],$sourceChainIds: [String],$searchTerm: String! ,$limit: Int!, $offset: Int!){\n  paginatedFundPaid(filter:{srcChainId:{in:$sourceChainIds}, createdAt:{range:$timeRange}},where_or:{srcTxHash:$searchTerm, contract:$searchTerm, messageHash:$searchTerm, forwarder:$searchTerm, forwarderRouterAddr:$searchTerm},sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    fundPaid{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      eventNonce\n      blockHeight\n      messageHash\n      forwarder\n      forwarderRouterAddr\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n";
export declare const latestFundDepositQuery = "\n  query getLatestFundDeposit($timeRange:[Int], $limit: Int!, $offset: Int!){\n    paginatedFundDeposit(filter:{createdAt:{range:$timeRange}}, sortBy:{createdAt:desc}, limit:$limit, offset:$offset){\n    totalRecords\n    fundDeposit{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      depositId\n      blockHeight\n      destChainId\n      amount\n      relayerFees\n\t\t\tsrcToken\n\t\t\trecipient\n\t\t\tdepositor\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n";
export declare const specificFundDepositQuery = "\n  query getFundDepositById($id:String!){\n  fundDeposit(id:$id){\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      depositId\n      blockHeight\n      destChainId\n      amount\n      relayerFees\n\t\t\tsrcToken\n\t\t\trecipient\n\t\t\tdepositor\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n}\n";
export declare const searchSpecificFundDepositQuery = "\n  query getFundPaidBySearch($timeRange:[Int], $searchTerm: String! ,$limit: Int!, $offset: Int!){\n  paginatedFundDeposit(filter:{createdAt:{range:$timeRange}},where_or:{srcTxHash:$searchTerm, contract:$searchTerm, srcToken:$searchTerm, recipient:$searchTerm, depositor:$searchTerm},sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    fundDeposit{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      depositId\n      blockHeight\n      destChainId\n      amount\n      relayerFees\n\t\t\tsrcToken\n\t\t\trecipient\n\t\t\tdepositor\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n";
export declare const searchSpecificFundDepositSrcChainIdQuery = "\n  query getCrosschainBySearch($timeRange:[Int],$sourceChainIds: [String],$searchTerm: String! ,$limit: Int!, $offset: Int!){\n  paginatedFundDeposit(filter:{srcChainId:{in:$sourceChainIds}, createdAt:{range:$timeRange}},where_or:{srcTxHash:$searchTerm, contract:$searchTerm, srcToken:$searchTerm, recipient:$searchTerm, depositor:$searchTerm},sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    fundDeposit{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      depositId\n      blockHeight\n      destChainId\n      amount\n      relayerFees\n\t\t\tsrcToken\n\t\t\trecipient\n\t\t\tdepositor\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n";
export declare const searchSpecificFundDepositDestChainIdQuery = "\n query getCrosschainBySearch($timeRange:[Int],$destinationChainIds: [String],$searchTerm: String! ,$limit: Int!, $offset: Int!){\n  paginatedFundDeposit(filter:{destChainId:{in:$destinationChainIds}, createdAt:{range:$timeRange}},where_or:{srcTxHash:$searchTerm, contract:$searchTerm, srcToken:$searchTerm, recipient:$searchTerm, depositor:$searchTerm},sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    fundDeposit{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      depositId\n      blockHeight\n      destChainId\n      amount\n      relayerFees\n\t\t\tsrcToken\n\t\t\trecipient\n\t\t\tdepositor\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n";
export declare const searchSpecificFundDepositChainIdQuery = "\n query getCrosschainBySearch($timeRange:[Int],$sourceChainIds:[String],$destinationChainIds: [String],$searchTerm: String! ,$limit: Int!, $offset: Int!){\n  paginatedFundDeposit(filter:{srcChainId:{in:$sourceChainIds}, destChainId:{in:$destinationChainIds}, createdAt:{range:$timeRange}},where_or:{srcTxHash:$searchTerm, contract:$searchTerm, srcToken:$searchTerm, recipient:$searchTerm, depositor:$searchTerm},sortBy:{createdAt:desc},limit:$limit,offset:$offset){\n    totalRecords\n    fundDeposit{\n      id\n\t\t\tsrcChainId\n      srcChainType\n      srcTxHash\n      srcTimestamp\n      contract\n      depositId\n      blockHeight\n      destChainId\n      amount\n      relayerFees\n\t\t\tsrcToken\n\t\t\trecipient\n\t\t\tdepositor\n      execResponse\n      errorResponse\n       eventHistory{\n        name\n        height\n        timestamp\n        txnHash\n        height\n      }\n      historyStatus{\n        status\n        txnHash\n        timestamp\n      }\n      eventSignatures{\n        validator\n        txnHash\n        timestamp\n        blockHeight\n        signature\n        ethSigner\n      }\n      status\n      createdAt\n      updatedAt\n    }\n  }\n}\n";
export declare const validatorsUptimeQuery = "\nquery getValidatorsUptime{\n  validators{\n    operatorAddress\n    consensusAddress\n    upTime\n  }\n}\n";
