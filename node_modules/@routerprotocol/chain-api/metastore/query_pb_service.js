// package: routerprotocol.routerchain.metastore
// file: metastore/query.proto

var metastore_query_pb = require("../metastore/query_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "routerprotocol.routerchain.metastore.Query";
  return Query;
}());

Query.Params = {
  methodName: "Params",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: metastore_query_pb.QueryParamsRequest,
  responseType: metastore_query_pb.QueryParamsResponse
};

Query.MetaInfoAll = {
  methodName: "MetaInfoAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: metastore_query_pb.QueryAllMetaInfoRequest,
  responseType: metastore_query_pb.QueryAllMetaInfoResponse
};

Query.MetaInfoAllByAddress = {
  methodName: "MetaInfoAllByAddress",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: metastore_query_pb.QueryAllMetaInfoRequestByAddress,
  responseType: metastore_query_pb.QueryAllMetaInfoResponseByAddress
};

Query.MetaInfoAllByChainAndAddress = {
  methodName: "MetaInfoAllByChainAndAddress",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: metastore_query_pb.QueryAllMetaInfoRequestByChainAndAddress,
  responseType: metastore_query_pb.QueryAllMetaInfoResponseByChainAndAddress
};

Query.MetaInfoAllByChainID = {
  methodName: "MetaInfoAllByChainID",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: metastore_query_pb.QueryAllMetaInfoRequestByChainID,
  responseType: metastore_query_pb.QueryAllMetaInfoResponseByChainID
};

Query.MetadataRequest = {
  methodName: "MetadataRequest",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: metastore_query_pb.QueryGetMetadataRequestRequest,
  responseType: metastore_query_pb.QueryGetMetadataRequestResponse
};

Query.MetadataRequestAll = {
  methodName: "MetadataRequestAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: metastore_query_pb.QueryAllMetadataRequestRequest,
  responseType: metastore_query_pb.QueryAllMetadataRequestResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.params = function params(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Params, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.metaInfoAll = function metaInfoAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MetaInfoAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.metaInfoAllByAddress = function metaInfoAllByAddress(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MetaInfoAllByAddress, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.metaInfoAllByChainAndAddress = function metaInfoAllByChainAndAddress(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MetaInfoAllByChainAndAddress, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.metaInfoAllByChainID = function metaInfoAllByChainID(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MetaInfoAllByChainID, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.metadataRequest = function metadataRequest(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MetadataRequest, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.metadataRequestAll = function metadataRequestAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.MetadataRequestAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

