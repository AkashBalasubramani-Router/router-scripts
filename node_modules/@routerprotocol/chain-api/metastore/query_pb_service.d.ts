// package: routerprotocol.routerchain.metastore
// file: metastore/query.proto

import * as metastore_query_pb from "../metastore/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryParams = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof metastore_query_pb.QueryParamsRequest;
  readonly responseType: typeof metastore_query_pb.QueryParamsResponse;
};

type QueryMetaInfoAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof metastore_query_pb.QueryAllMetaInfoRequest;
  readonly responseType: typeof metastore_query_pb.QueryAllMetaInfoResponse;
};

type QueryMetaInfoAllByAddress = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof metastore_query_pb.QueryAllMetaInfoRequestByAddress;
  readonly responseType: typeof metastore_query_pb.QueryAllMetaInfoResponseByAddress;
};

type QueryMetaInfoAllByChainAndAddress = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof metastore_query_pb.QueryAllMetaInfoRequestByChainAndAddress;
  readonly responseType: typeof metastore_query_pb.QueryAllMetaInfoResponseByChainAndAddress;
};

type QueryMetaInfoAllByChainID = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof metastore_query_pb.QueryAllMetaInfoRequestByChainID;
  readonly responseType: typeof metastore_query_pb.QueryAllMetaInfoResponseByChainID;
};

type QueryMetadataRequest = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof metastore_query_pb.QueryGetMetadataRequestRequest;
  readonly responseType: typeof metastore_query_pb.QueryGetMetadataRequestResponse;
};

type QueryMetadataRequestAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof metastore_query_pb.QueryAllMetadataRequestRequest;
  readonly responseType: typeof metastore_query_pb.QueryAllMetadataRequestResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly Params: QueryParams;
  static readonly MetaInfoAll: QueryMetaInfoAll;
  static readonly MetaInfoAllByAddress: QueryMetaInfoAllByAddress;
  static readonly MetaInfoAllByChainAndAddress: QueryMetaInfoAllByChainAndAddress;
  static readonly MetaInfoAllByChainID: QueryMetaInfoAllByChainID;
  static readonly MetadataRequest: QueryMetadataRequest;
  static readonly MetadataRequestAll: QueryMetadataRequestAll;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  params(
    requestMessage: metastore_query_pb.QueryParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  params(
    requestMessage: metastore_query_pb.QueryParamsRequest,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  metaInfoAll(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponse|null) => void
  ): UnaryResponse;
  metaInfoAll(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequest,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponse|null) => void
  ): UnaryResponse;
  metaInfoAllByAddress(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequestByAddress,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponseByAddress|null) => void
  ): UnaryResponse;
  metaInfoAllByAddress(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequestByAddress,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponseByAddress|null) => void
  ): UnaryResponse;
  metaInfoAllByChainAndAddress(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequestByChainAndAddress,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponseByChainAndAddress|null) => void
  ): UnaryResponse;
  metaInfoAllByChainAndAddress(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequestByChainAndAddress,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponseByChainAndAddress|null) => void
  ): UnaryResponse;
  metaInfoAllByChainID(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequestByChainID,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponseByChainID|null) => void
  ): UnaryResponse;
  metaInfoAllByChainID(
    requestMessage: metastore_query_pb.QueryAllMetaInfoRequestByChainID,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetaInfoResponseByChainID|null) => void
  ): UnaryResponse;
  metadataRequest(
    requestMessage: metastore_query_pb.QueryGetMetadataRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryGetMetadataRequestResponse|null) => void
  ): UnaryResponse;
  metadataRequest(
    requestMessage: metastore_query_pb.QueryGetMetadataRequestRequest,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryGetMetadataRequestResponse|null) => void
  ): UnaryResponse;
  metadataRequestAll(
    requestMessage: metastore_query_pb.QueryAllMetadataRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetadataRequestResponse|null) => void
  ): UnaryResponse;
  metadataRequestAll(
    requestMessage: metastore_query_pb.QueryAllMetadataRequestRequest,
    callback: (error: ServiceError|null, responseMessage: metastore_query_pb.QueryAllMetadataRequestResponse|null) => void
  ): UnaryResponse;
}

