// source: metastore/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var metastore_meta_tx_status_pb = require('../metastore/meta_tx_status_pb.js');
goog.object.extend(proto, metastore_meta_tx_status_pb);
var multichain_chain_type_pb = require('../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var cosmos_base_v1beta1_coin_pb = require('../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.metastore.EventFeePayerApproved', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.displayName = 'proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.displayName = 'proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.metastore.EventFeePayerApproved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.displayName = 'proto.routerprotocol.routerchain.metastore.EventFeePayerApproved';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    chaintype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    daapaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    feepayer: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated;
  return proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDaapaddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeepayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDaapaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFeepayer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType chainType = 2;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string chainId = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 eventNonce = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 blockHeight = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string daapAddress = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getDaapaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.setDaapaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string feePayer = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.getFeepayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetadataRequestCreated.prototype.setFeepayer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    daapaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    feepayer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated;
  return proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDaapaddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeepayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDaapaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeepayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType chainType = 1;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string chainId = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string daapAddress = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.getDaapaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.setDaapaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string feePayer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.getFeepayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated} returns this
 */
proto.routerprotocol.routerchain.metastore.EventMetaInfoCreated.prototype.setFeepayer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    daapaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    feepayer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.metastore.EventFeePayerApproved;
  return proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDaapaddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeepayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDaapaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFeepayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType chainType = 1;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved} returns this
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string chainId = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved} returns this
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string daapAddress = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.getDaapaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved} returns this
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.setDaapaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string feePayer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.getFeepayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.metastore.EventFeePayerApproved} returns this
 */
proto.routerprotocol.routerchain.metastore.EventFeePayerApproved.prototype.setFeepayer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.metastore);
