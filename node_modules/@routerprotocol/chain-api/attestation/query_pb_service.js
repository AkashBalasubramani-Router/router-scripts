// package: routerprotocol.routerchain.attestation
// file: attestation/query.proto

var attestation_query_pb = require("../attestation/query_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "routerprotocol.routerchain.attestation.Query";
  return Query;
}());

Query.Params = {
  methodName: "Params",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryParamsRequest,
  responseType: attestation_query_pb.QueryParamsResponse
};

Query.Valset = {
  methodName: "Valset",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryGetValsetRequest,
  responseType: attestation_query_pb.QueryGetValsetResponse
};

Query.ValsetAll = {
  methodName: "ValsetAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryAllValsetRequest,
  responseType: attestation_query_pb.QueryAllValsetResponse
};

Query.Attestation = {
  methodName: "Attestation",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryGetAttestationRequest,
  responseType: attestation_query_pb.QueryGetAttestationResponse
};

Query.AttestationAll = {
  methodName: "AttestationAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryAllAttestationRequest,
  responseType: attestation_query_pb.QueryAllAttestationResponse
};

Query.ValsetConfirmation = {
  methodName: "ValsetConfirmation",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryGetValsetConfirmationRequest,
  responseType: attestation_query_pb.QueryGetValsetConfirmationResponse
};

Query.ValsetConfirmationAll = {
  methodName: "ValsetConfirmationAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryAllValsetConfirmationRequest,
  responseType: attestation_query_pb.QueryAllValsetConfirmationResponse
};

Query.ValsetUpdatedClaim = {
  methodName: "ValsetUpdatedClaim",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryGetValsetUpdatedClaimRequest,
  responseType: attestation_query_pb.QueryGetValsetUpdatedClaimResponse
};

Query.ValsetUpdatedClaimAll = {
  methodName: "ValsetUpdatedClaimAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryAllValsetUpdatedClaimRequest,
  responseType: attestation_query_pb.QueryAllValsetUpdatedClaimResponse
};

Query.LatestValsetNonce = {
  methodName: "LatestValsetNonce",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryLatestValsetNonceRequest,
  responseType: attestation_query_pb.QueryLatestValsetNonceResponse
};

Query.LatestValset = {
  methodName: "LatestValset",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryLatestValsetRequest,
  responseType: attestation_query_pb.QueryLatestValsetResponse
};

Query.LastEventNonce = {
  methodName: "LastEventNonce",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryLastEventNonceRequest,
  responseType: attestation_query_pb.QueryLastEventNonceResponse
};

Query.ListOrchestrators = {
  methodName: "ListOrchestrators",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryListOrchestratorsRequest,
  responseType: attestation_query_pb.QueryListOrchestratorsResponse
};

Query.FetchOrchestratorValidator = {
  methodName: "FetchOrchestratorValidator",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: attestation_query_pb.QueryFetchOrchestratorValidatorRequest,
  responseType: attestation_query_pb.QueryFetchOrchestratorValidatorResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.params = function params(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Params, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.valset = function valset(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Valset, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.valsetAll = function valsetAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ValsetAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.attestation = function attestation(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Attestation, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.attestationAll = function attestationAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.AttestationAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.valsetConfirmation = function valsetConfirmation(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ValsetConfirmation, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.valsetConfirmationAll = function valsetConfirmationAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ValsetConfirmationAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.valsetUpdatedClaim = function valsetUpdatedClaim(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ValsetUpdatedClaim, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.valsetUpdatedClaimAll = function valsetUpdatedClaimAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ValsetUpdatedClaimAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.latestValsetNonce = function latestValsetNonce(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.LatestValsetNonce, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.latestValset = function latestValset(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.LatestValset, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.lastEventNonce = function lastEventNonce(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.LastEventNonce, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.listOrchestrators = function listOrchestrators(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ListOrchestrators, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.fetchOrchestratorValidator = function fetchOrchestratorValidator(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FetchOrchestratorValidator, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

