// source: attestation/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var attestation_claim_type_pb = require('../attestation/claim_type_pb.js');
goog.object.extend(proto, attestation_claim_type_pb);
var multichain_chain_type_pb = require('../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var attestation_bridge_validator_pb = require('../attestation/bridge_validator_pb.js');
goog.object.extend(proto, attestation_bridge_validator_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.attestation.EventAttestationObserved', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.attestation.EventAttestationVote', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.attestation.EventValsetConfirm', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.attestation.EventValsetCreate', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.attestation.EventAttestationVote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.attestation.EventAttestationVote.displayName = 'proto.routerprotocol.routerchain.attestation.EventAttestationVote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.attestation.EventAttestationObserved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.attestation.EventAttestationObserved.displayName = 'proto.routerprotocol.routerchain.attestation.EventAttestationObserved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.displayName = 'proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.routerprotocol.routerchain.attestation.EventValsetCreate.repeatedFields_, null);
};
goog.inherits(proto.routerprotocol.routerchain.attestation.EventValsetCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.attestation.EventValsetCreate.displayName = 'proto.routerprotocol.routerchain.attestation.EventValsetCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.attestation.EventValsetConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.attestation.EventValsetConfirm.displayName = 'proto.routerprotocol.routerchain.attestation.EventValsetConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.repeatedFields_, null);
};
goog.inherits(proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.displayName = 'proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.attestation.EventAttestationVote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attestationId: msg.getAttestationId_asB64(),
    chaintype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    voter: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.attestation.EventAttestationVote;
  return proto.routerprotocol.routerchain.attestation.EventAttestationVote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.routerprotocol.routerchain.attestation.ClaimType} */ (reader.readEnum());
      msg.setAttestationtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 3:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setVoter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.attestation.EventAttestationVote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getVoter();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional ClaimType attestationType = 1;
 * @return {!proto.routerprotocol.routerchain.attestation.ClaimType}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getAttestationtype = function() {
  return /** @type {!proto.routerprotocol.routerchain.attestation.ClaimType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.attestation.ClaimType} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.setAttestationtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes attestation_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes attestation_id = 2;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType chainType = 3;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string chainId = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 eventNonce = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string voter = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.getVoter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationVote} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationVote.prototype.setVoter = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.attestation.EventAttestationObserved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    attestationId: msg.getAttestationId_asB64(),
    chaintype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.attestation.EventAttestationObserved;
  return proto.routerprotocol.routerchain.attestation.EventAttestationObserved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.routerprotocol.routerchain.attestation.ClaimType} */ (reader.readEnum());
      msg.setAttestationtype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 3:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.attestation.EventAttestationObserved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional ClaimType attestationType = 1;
 * @return {!proto.routerprotocol.routerchain.attestation.ClaimType}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.getAttestationtype = function() {
  return /** @type {!proto.routerprotocol.routerchain.attestation.ClaimType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.attestation.ClaimType} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.setAttestationtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes attestation_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes attestation_id = 2;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType chainType = 3;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string chainId = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 eventNonce = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventAttestationObserved} returns this
 */
proto.routerprotocol.routerchain.attestation.EventAttestationObserved.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.toObject = function(includeInstance, msg) {
  var f, obj = {
    validatorAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    orchestratorAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    operatorEthAddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses}
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses;
  return proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses}
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestratorAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatorEthAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOrchestratorAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOperatorEthAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string validator_address = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses} returns this
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string orchestrator_address = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.getOrchestratorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses} returns this
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.setOrchestratorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string operator_eth_address = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.getOperatorEthAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses} returns this
 */
proto.routerprotocol.routerchain.attestation.EventSetOrchestratorAddresses.prototype.setOperatorEthAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.attestation.EventValsetCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    valsetNonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    valsetHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    valsetMembersList: jspb.Message.toObjectList(msg.getValsetMembersList(),
    attestation_bridge_validator_pb.BridgeValidator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetCreate}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.attestation.EventValsetCreate;
  return proto.routerprotocol.routerchain.attestation.EventValsetCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetCreate}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValsetNonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValsetHeight(value);
      break;
    case 3:
      var value = new attestation_bridge_validator_pb.BridgeValidator;
      reader.readMessage(value,attestation_bridge_validator_pb.BridgeValidator.deserializeBinaryFromReader);
      msg.addValsetMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.attestation.EventValsetCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValsetNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getValsetHeight();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getValsetMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      attestation_bridge_validator_pb.BridgeValidator.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 valset_nonce = 1;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.getValsetNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetCreate} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.setValsetNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 valset_height = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.getValsetHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetCreate} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.setValsetHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated BridgeValidator valset_members = 3;
 * @return {!Array<!proto.routerprotocol.routerchain.attestation.BridgeValidator>}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.getValsetMembersList = function() {
  return /** @type{!Array<!proto.routerprotocol.routerchain.attestation.BridgeValidator>} */ (
    jspb.Message.getRepeatedWrapperField(this, attestation_bridge_validator_pb.BridgeValidator, 3));
};


/**
 * @param {!Array<!proto.routerprotocol.routerchain.attestation.BridgeValidator>} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetCreate} returns this
*/
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.setValsetMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.routerprotocol.routerchain.attestation.BridgeValidator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.routerprotocol.routerchain.attestation.BridgeValidator}
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.addValsetMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.routerprotocol.routerchain.attestation.BridgeValidator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetCreate} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetCreate.prototype.clearValsetMembersList = function() {
  return this.setValsetMembersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.attestation.EventValsetConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    valsetNonce: jspb.Message.getFieldWithDefault(msg, 1, 0),
    orchestratorAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ethsigner: jspb.Message.getFieldWithDefault(msg, 3, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.attestation.EventValsetConfirm;
  return proto.routerprotocol.routerchain.attestation.EventValsetConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValsetNonce(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestratorAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthsigner(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.attestation.EventValsetConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValsetNonce();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOrchestratorAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEthsigner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint64 valset_nonce = 1;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.getValsetNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.setValsetNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string orchestrator_address = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.getOrchestratorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.setOrchestratorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ethSigner = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.getEthsigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.setEthsigner = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string signature = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetConfirm} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetConfirm.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    chaintype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chainid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 4, 0),
    valsetNonce: jspb.Message.getFieldWithDefault(msg, 5, 0),
    eventHeight: jspb.Message.getFieldWithDefault(msg, 6, 0),
    srcTxHash: jspb.Message.getFieldWithDefault(msg, 7, ""),
    valsetMembersList: jspb.Message.toObjectList(msg.getValsetMembersList(),
    attestation_bridge_validator_pb.BridgeValidator.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated;
  return proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValsetNonce(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventHeight(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcTxHash(value);
      break;
    case 8:
      var value = new attestation_bridge_validator_pb.BridgeValidator;
      reader.readMessage(value,attestation_bridge_validator_pb.BridgeValidator.deserializeBinaryFromReader);
      msg.addValsetMembers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getValsetNonce();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getEventHeight();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSrcTxHash();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getValsetMembersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      attestation_bridge_validator_pb.BridgeValidator.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType chainType = 2;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string chainId = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 eventNonce = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 valset_nonce = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getValsetNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setValsetNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 event_height = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getEventHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setEventHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string src_tx_hash = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getSrcTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setSrcTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated BridgeValidator valset_members = 8;
 * @return {!Array<!proto.routerprotocol.routerchain.attestation.BridgeValidator>}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.getValsetMembersList = function() {
  return /** @type{!Array<!proto.routerprotocol.routerchain.attestation.BridgeValidator>} */ (
    jspb.Message.getRepeatedWrapperField(this, attestation_bridge_validator_pb.BridgeValidator, 8));
};


/**
 * @param {!Array<!proto.routerprotocol.routerchain.attestation.BridgeValidator>} value
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
*/
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.setValsetMembersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.routerprotocol.routerchain.attestation.BridgeValidator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.routerprotocol.routerchain.attestation.BridgeValidator}
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.addValsetMembers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.routerprotocol.routerchain.attestation.BridgeValidator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated} returns this
 */
proto.routerprotocol.routerchain.attestation.EventValsetUpdatedClaimCreated.prototype.clearValsetMembersList = function() {
  return this.setValsetMembersList([]);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.attestation);
