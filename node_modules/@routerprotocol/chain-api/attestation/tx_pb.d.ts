// package: routerprotocol.routerchain.attestation
// file: attestation/tx.proto

import * as jspb from "google-protobuf";
import * as attestation_bridge_validator_pb from "../attestation/bridge_validator_pb";
import * as gogoproto_gogo_pb from "../gogoproto/gogo_pb";

export class MsgSetOrchestratorAddress extends jspb.Message {
  getValidator(): string;
  setValidator(value: string): void;

  getOrchestrator(): string;
  setOrchestrator(value: string): void;

  getEthaddress(): string;
  setEthaddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgSetOrchestratorAddress.AsObject;
  static toObject(includeInstance: boolean, msg: MsgSetOrchestratorAddress): MsgSetOrchestratorAddress.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgSetOrchestratorAddress, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgSetOrchestratorAddress;
  static deserializeBinaryFromReader(message: MsgSetOrchestratorAddress, reader: jspb.BinaryReader): MsgSetOrchestratorAddress;
}

export namespace MsgSetOrchestratorAddress {
  export type AsObject = {
    validator: string,
    orchestrator: string,
    ethaddress: string,
  }
}

export class MsgSetOrchestratorAddressResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgSetOrchestratorAddressResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgSetOrchestratorAddressResponse): MsgSetOrchestratorAddressResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgSetOrchestratorAddressResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgSetOrchestratorAddressResponse;
  static deserializeBinaryFromReader(message: MsgSetOrchestratorAddressResponse, reader: jspb.BinaryReader): MsgSetOrchestratorAddressResponse;
}

export namespace MsgSetOrchestratorAddressResponse {
  export type AsObject = {
  }
}

export class MsgValsetConfirm extends jspb.Message {
  getOrchestrator(): string;
  setOrchestrator(value: string): void;

  getValsetnonce(): number;
  setValsetnonce(value: number): void;

  getEthaddress(): string;
  setEthaddress(value: string): void;

  getSignature(): string;
  setSignature(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgValsetConfirm.AsObject;
  static toObject(includeInstance: boolean, msg: MsgValsetConfirm): MsgValsetConfirm.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgValsetConfirm, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgValsetConfirm;
  static deserializeBinaryFromReader(message: MsgValsetConfirm, reader: jspb.BinaryReader): MsgValsetConfirm;
}

export namespace MsgValsetConfirm {
  export type AsObject = {
    orchestrator: string,
    valsetnonce: number,
    ethaddress: string,
    signature: string,
  }
}

export class MsgValsetConfirmResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgValsetConfirmResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgValsetConfirmResponse): MsgValsetConfirmResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgValsetConfirmResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgValsetConfirmResponse;
  static deserializeBinaryFromReader(message: MsgValsetConfirmResponse, reader: jspb.BinaryReader): MsgValsetConfirmResponse;
}

export namespace MsgValsetConfirmResponse {
  export type AsObject = {
  }
}

export class MsgValsetUpdatedClaim extends jspb.Message {
  getOrchestrator(): string;
  setOrchestrator(value: string): void;

  getChainid(): string;
  setChainid(value: string): void;

  getContract(): string;
  setContract(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getValsetnonce(): number;
  setValsetnonce(value: number): void;

  getBlockheight(): number;
  setBlockheight(value: number): void;

  clearMembersList(): void;
  getMembersList(): Array<attestation_bridge_validator_pb.BridgeValidator>;
  setMembersList(value: Array<attestation_bridge_validator_pb.BridgeValidator>): void;
  addMembers(value?: attestation_bridge_validator_pb.BridgeValidator, index?: number): attestation_bridge_validator_pb.BridgeValidator;

  getSourcetxhash(): string;
  setSourcetxhash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgValsetUpdatedClaim.AsObject;
  static toObject(includeInstance: boolean, msg: MsgValsetUpdatedClaim): MsgValsetUpdatedClaim.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgValsetUpdatedClaim, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgValsetUpdatedClaim;
  static deserializeBinaryFromReader(message: MsgValsetUpdatedClaim, reader: jspb.BinaryReader): MsgValsetUpdatedClaim;
}

export namespace MsgValsetUpdatedClaim {
  export type AsObject = {
    orchestrator: string,
    chainid: string,
    contract: string,
    eventnonce: number,
    valsetnonce: number,
    blockheight: number,
    membersList: Array<attestation_bridge_validator_pb.BridgeValidator.AsObject>,
    sourcetxhash: string,
  }
}

export class MsgValsetUpdatedClaimResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgValsetUpdatedClaimResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgValsetUpdatedClaimResponse): MsgValsetUpdatedClaimResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgValsetUpdatedClaimResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgValsetUpdatedClaimResponse;
  static deserializeBinaryFromReader(message: MsgValsetUpdatedClaimResponse, reader: jspb.BinaryReader): MsgValsetUpdatedClaimResponse;
}

export namespace MsgValsetUpdatedClaimResponse {
  export type AsObject = {
  }
}

