// package: routerprotocol.routerchain.attestation
// file: attestation/events.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../gogoproto/gogo_pb";
import * as google_protobuf_any_pb from "google-protobuf/google/protobuf/any_pb";
import * as attestation_claim_type_pb from "../attestation/claim_type_pb";
import * as multichain_chain_type_pb from "../multichain/chain_type_pb";
import * as attestation_bridge_validator_pb from "../attestation/bridge_validator_pb";

export class EventAttestationVote extends jspb.Message {
  getAttestationtype(): attestation_claim_type_pb.ClaimTypeMap[keyof attestation_claim_type_pb.ClaimTypeMap];
  setAttestationtype(value: attestation_claim_type_pb.ClaimTypeMap[keyof attestation_claim_type_pb.ClaimTypeMap]): void;

  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getChaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setChaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getChainid(): string;
  setChainid(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getVoter(): string;
  setVoter(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventAttestationVote.AsObject;
  static toObject(includeInstance: boolean, msg: EventAttestationVote): EventAttestationVote.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventAttestationVote, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventAttestationVote;
  static deserializeBinaryFromReader(message: EventAttestationVote, reader: jspb.BinaryReader): EventAttestationVote;
}

export namespace EventAttestationVote {
  export type AsObject = {
    attestationtype: attestation_claim_type_pb.ClaimTypeMap[keyof attestation_claim_type_pb.ClaimTypeMap],
    attestationId: Uint8Array | string,
    chaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    chainid: string,
    eventnonce: number,
    voter: string,
  }
}

export class EventAttestationObserved extends jspb.Message {
  getAttestationtype(): attestation_claim_type_pb.ClaimTypeMap[keyof attestation_claim_type_pb.ClaimTypeMap];
  setAttestationtype(value: attestation_claim_type_pb.ClaimTypeMap[keyof attestation_claim_type_pb.ClaimTypeMap]): void;

  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getChaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setChaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getChainid(): string;
  setChainid(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventAttestationObserved.AsObject;
  static toObject(includeInstance: boolean, msg: EventAttestationObserved): EventAttestationObserved.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventAttestationObserved, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventAttestationObserved;
  static deserializeBinaryFromReader(message: EventAttestationObserved, reader: jspb.BinaryReader): EventAttestationObserved;
}

export namespace EventAttestationObserved {
  export type AsObject = {
    attestationtype: attestation_claim_type_pb.ClaimTypeMap[keyof attestation_claim_type_pb.ClaimTypeMap],
    attestationId: Uint8Array | string,
    chaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    chainid: string,
    eventnonce: number,
  }
}

export class EventSetOrchestratorAddresses extends jspb.Message {
  getValidatorAddress(): string;
  setValidatorAddress(value: string): void;

  getOrchestratorAddress(): string;
  setOrchestratorAddress(value: string): void;

  getOperatorEthAddress(): string;
  setOperatorEthAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventSetOrchestratorAddresses.AsObject;
  static toObject(includeInstance: boolean, msg: EventSetOrchestratorAddresses): EventSetOrchestratorAddresses.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventSetOrchestratorAddresses, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventSetOrchestratorAddresses;
  static deserializeBinaryFromReader(message: EventSetOrchestratorAddresses, reader: jspb.BinaryReader): EventSetOrchestratorAddresses;
}

export namespace EventSetOrchestratorAddresses {
  export type AsObject = {
    validatorAddress: string,
    orchestratorAddress: string,
    operatorEthAddress: string,
  }
}

export class EventValsetCreate extends jspb.Message {
  getValsetNonce(): number;
  setValsetNonce(value: number): void;

  getValsetHeight(): number;
  setValsetHeight(value: number): void;

  clearValsetMembersList(): void;
  getValsetMembersList(): Array<attestation_bridge_validator_pb.BridgeValidator>;
  setValsetMembersList(value: Array<attestation_bridge_validator_pb.BridgeValidator>): void;
  addValsetMembers(value?: attestation_bridge_validator_pb.BridgeValidator, index?: number): attestation_bridge_validator_pb.BridgeValidator;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventValsetCreate.AsObject;
  static toObject(includeInstance: boolean, msg: EventValsetCreate): EventValsetCreate.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventValsetCreate, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventValsetCreate;
  static deserializeBinaryFromReader(message: EventValsetCreate, reader: jspb.BinaryReader): EventValsetCreate;
}

export namespace EventValsetCreate {
  export type AsObject = {
    valsetNonce: number,
    valsetHeight: number,
    valsetMembersList: Array<attestation_bridge_validator_pb.BridgeValidator.AsObject>,
  }
}

export class EventValsetConfirm extends jspb.Message {
  getValsetNonce(): number;
  setValsetNonce(value: number): void;

  getOrchestratorAddress(): string;
  setOrchestratorAddress(value: string): void;

  getEthsigner(): string;
  setEthsigner(value: string): void;

  getSignature(): string;
  setSignature(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventValsetConfirm.AsObject;
  static toObject(includeInstance: boolean, msg: EventValsetConfirm): EventValsetConfirm.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventValsetConfirm, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventValsetConfirm;
  static deserializeBinaryFromReader(message: EventValsetConfirm, reader: jspb.BinaryReader): EventValsetConfirm;
}

export namespace EventValsetConfirm {
  export type AsObject = {
    valsetNonce: number,
    orchestratorAddress: string,
    ethsigner: string,
    signature: string,
  }
}

export class EventValsetUpdatedClaimCreated extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getChaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setChaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getChainid(): string;
  setChainid(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getValsetNonce(): number;
  setValsetNonce(value: number): void;

  getEventHeight(): number;
  setEventHeight(value: number): void;

  getSrcTxHash(): string;
  setSrcTxHash(value: string): void;

  clearValsetMembersList(): void;
  getValsetMembersList(): Array<attestation_bridge_validator_pb.BridgeValidator>;
  setValsetMembersList(value: Array<attestation_bridge_validator_pb.BridgeValidator>): void;
  addValsetMembers(value?: attestation_bridge_validator_pb.BridgeValidator, index?: number): attestation_bridge_validator_pb.BridgeValidator;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventValsetUpdatedClaimCreated.AsObject;
  static toObject(includeInstance: boolean, msg: EventValsetUpdatedClaimCreated): EventValsetUpdatedClaimCreated.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventValsetUpdatedClaimCreated, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventValsetUpdatedClaimCreated;
  static deserializeBinaryFromReader(message: EventValsetUpdatedClaimCreated, reader: jspb.BinaryReader): EventValsetUpdatedClaimCreated;
}

export namespace EventValsetUpdatedClaimCreated {
  export type AsObject = {
    attestationId: Uint8Array | string,
    chaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    chainid: string,
    eventnonce: number,
    valsetNonce: number,
    eventHeight: number,
    srcTxHash: string,
    valsetMembersList: Array<attestation_bridge_validator_pb.BridgeValidator.AsObject>,
  }
}

