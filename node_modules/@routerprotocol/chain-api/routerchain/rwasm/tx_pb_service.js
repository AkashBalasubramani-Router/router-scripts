// package: routerprotocol.routerchain.rwasm
// file: routerchain/rwasm/tx.proto

var routerchain_rwasm_tx_pb = require("../../routerchain/rwasm/tx_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Msg = (function () {
  function Msg() {}
  Msg.serviceName = "routerprotocol.routerchain.rwasm.Msg";
  return Msg;
}());

Msg.ExecuteCwContract = {
  methodName: "ExecuteCwContract",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_rwasm_tx_pb.MsgExecuteCwContract,
  responseType: routerchain_rwasm_tx_pb.MsgExecuteCwContractResponse
};

Msg.InstantiateCwContract = {
  methodName: "InstantiateCwContract",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_rwasm_tx_pb.MsgInstantiateCwContract,
  responseType: routerchain_rwasm_tx_pb.MsgInstantiateCwContractResponse
};

Msg.CwStoreCode = {
  methodName: "CwStoreCode",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_rwasm_tx_pb.MsgCwStoreCode,
  responseType: routerchain_rwasm_tx_pb.MsgCwStoreCodeResponse
};

Msg.MigrateCwContract = {
  methodName: "MigrateCwContract",
  service: Msg,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_rwasm_tx_pb.MsgMigrateCwContract,
  responseType: routerchain_rwasm_tx_pb.MsgMigrateCwContractResponse
};

exports.Msg = Msg;

function MsgClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

MsgClient.prototype.executeCwContract = function executeCwContract(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.ExecuteCwContract, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.instantiateCwContract = function instantiateCwContract(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.InstantiateCwContract, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.cwStoreCode = function cwStoreCode(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.CwStoreCode, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

MsgClient.prototype.migrateCwContract = function migrateCwContract(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Msg.MigrateCwContract, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.MsgClient = MsgClient;

