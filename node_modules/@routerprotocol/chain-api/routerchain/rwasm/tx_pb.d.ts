// package: routerprotocol.routerchain.rwasm
// file: routerchain/rwasm/tx.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../gogoproto/gogo_pb";

export class MsgExecuteCwContract extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getContract(): string;
  setContract(value: string): void;

  getMsg(): string;
  setMsg(value: string): void;

  getFunds(): string;
  setFunds(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgExecuteCwContract.AsObject;
  static toObject(includeInstance: boolean, msg: MsgExecuteCwContract): MsgExecuteCwContract.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgExecuteCwContract, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgExecuteCwContract;
  static deserializeBinaryFromReader(message: MsgExecuteCwContract, reader: jspb.BinaryReader): MsgExecuteCwContract;
}

export namespace MsgExecuteCwContract {
  export type AsObject = {
    sender: string,
    contract: string,
    msg: string,
    funds: string,
  }
}

export class MsgExecuteCwContractResponse extends jspb.Message {
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgExecuteCwContractResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgExecuteCwContractResponse): MsgExecuteCwContractResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgExecuteCwContractResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgExecuteCwContractResponse;
  static deserializeBinaryFromReader(message: MsgExecuteCwContractResponse, reader: jspb.BinaryReader): MsgExecuteCwContractResponse;
}

export namespace MsgExecuteCwContractResponse {
  export type AsObject = {
    data: Uint8Array | string,
  }
}

export class MsgInstantiateCwContract extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getAdmin(): string;
  setAdmin(value: string): void;

  getCodeId(): number;
  setCodeId(value: number): void;

  getLabel(): string;
  setLabel(value: string): void;

  getMsg(): string;
  setMsg(value: string): void;

  getFunds(): string;
  setFunds(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgInstantiateCwContract.AsObject;
  static toObject(includeInstance: boolean, msg: MsgInstantiateCwContract): MsgInstantiateCwContract.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgInstantiateCwContract, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgInstantiateCwContract;
  static deserializeBinaryFromReader(message: MsgInstantiateCwContract, reader: jspb.BinaryReader): MsgInstantiateCwContract;
}

export namespace MsgInstantiateCwContract {
  export type AsObject = {
    sender: string,
    admin: string,
    codeId: number,
    label: string,
    msg: string,
    funds: string,
  }
}

export class MsgInstantiateCwContractResponse extends jspb.Message {
  getAddress(): string;
  setAddress(value: string): void;

  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgInstantiateCwContractResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgInstantiateCwContractResponse): MsgInstantiateCwContractResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgInstantiateCwContractResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgInstantiateCwContractResponse;
  static deserializeBinaryFromReader(message: MsgInstantiateCwContractResponse, reader: jspb.BinaryReader): MsgInstantiateCwContractResponse;
}

export namespace MsgInstantiateCwContractResponse {
  export type AsObject = {
    address: string,
    data: Uint8Array | string,
  }
}

export class MsgCwStoreCode extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getWasmByteCode(): string;
  setWasmByteCode(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgCwStoreCode.AsObject;
  static toObject(includeInstance: boolean, msg: MsgCwStoreCode): MsgCwStoreCode.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgCwStoreCode, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgCwStoreCode;
  static deserializeBinaryFromReader(message: MsgCwStoreCode, reader: jspb.BinaryReader): MsgCwStoreCode;
}

export namespace MsgCwStoreCode {
  export type AsObject = {
    sender: string,
    wasmByteCode: string,
  }
}

export class MsgCwStoreCodeResponse extends jspb.Message {
  getCodeId(): number;
  setCodeId(value: number): void;

  getChecksum(): Uint8Array | string;
  getChecksum_asU8(): Uint8Array;
  getChecksum_asB64(): string;
  setChecksum(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgCwStoreCodeResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgCwStoreCodeResponse): MsgCwStoreCodeResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgCwStoreCodeResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgCwStoreCodeResponse;
  static deserializeBinaryFromReader(message: MsgCwStoreCodeResponse, reader: jspb.BinaryReader): MsgCwStoreCodeResponse;
}

export namespace MsgCwStoreCodeResponse {
  export type AsObject = {
    codeId: number,
    checksum: Uint8Array | string,
  }
}

export class MsgMigrateCwContract extends jspb.Message {
  getSender(): string;
  setSender(value: string): void;

  getContract(): string;
  setContract(value: string): void;

  getCodeId(): number;
  setCodeId(value: number): void;

  getMsg(): string;
  setMsg(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgMigrateCwContract.AsObject;
  static toObject(includeInstance: boolean, msg: MsgMigrateCwContract): MsgMigrateCwContract.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgMigrateCwContract, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgMigrateCwContract;
  static deserializeBinaryFromReader(message: MsgMigrateCwContract, reader: jspb.BinaryReader): MsgMigrateCwContract;
}

export namespace MsgMigrateCwContract {
  export type AsObject = {
    sender: string,
    contract: string,
    codeId: number,
    msg: string,
  }
}

export class MsgMigrateCwContractResponse extends jspb.Message {
  getData(): Uint8Array | string;
  getData_asU8(): Uint8Array;
  getData_asB64(): string;
  setData(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgMigrateCwContractResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgMigrateCwContractResponse): MsgMigrateCwContractResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgMigrateCwContractResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgMigrateCwContractResponse;
  static deserializeBinaryFromReader(message: MsgMigrateCwContractResponse, reader: jspb.BinaryReader): MsgMigrateCwContractResponse;
}

export namespace MsgMigrateCwContractResponse {
  export type AsObject = {
    data: Uint8Array | string,
  }
}

