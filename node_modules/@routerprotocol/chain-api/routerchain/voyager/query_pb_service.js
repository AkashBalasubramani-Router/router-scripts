// package: routerprotocol.routerchain.voyager
// file: routerchain/voyager/query.proto

var routerchain_voyager_query_pb = require("../../routerchain/voyager/query_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "routerprotocol.routerchain.voyager.Query";
  return Query;
}());

Query.Params = {
  methodName: "Params",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_voyager_query_pb.QueryParamsRequest,
  responseType: routerchain_voyager_query_pb.QueryParamsResponse
};

Query.FundDepositRequest = {
  methodName: "FundDepositRequest",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_voyager_query_pb.QueryGetFundDepositRequestRequest,
  responseType: routerchain_voyager_query_pb.QueryGetFundDepositRequestResponse
};

Query.FundDepositRequestAll = {
  methodName: "FundDepositRequestAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_voyager_query_pb.QueryAllFundDepositRequestRequest,
  responseType: routerchain_voyager_query_pb.QueryAllFundDepositRequestResponse
};

Query.FundsPaidRequest = {
  methodName: "FundsPaidRequest",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_voyager_query_pb.QueryGetFundsPaidRequestRequest,
  responseType: routerchain_voyager_query_pb.QueryGetFundsPaidRequestResponse
};

Query.FundsPaidRequestAll = {
  methodName: "FundsPaidRequestAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_voyager_query_pb.QueryAllFundsPaidRequestRequest,
  responseType: routerchain_voyager_query_pb.QueryAllFundsPaidRequestResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.params = function params(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Params, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.fundDepositRequest = function fundDepositRequest(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FundDepositRequest, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.fundDepositRequestAll = function fundDepositRequestAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FundDepositRequestAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.fundsPaidRequest = function fundsPaidRequest(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FundsPaidRequest, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.fundsPaidRequestAll = function fundsPaidRequestAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.FundsPaidRequestAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

