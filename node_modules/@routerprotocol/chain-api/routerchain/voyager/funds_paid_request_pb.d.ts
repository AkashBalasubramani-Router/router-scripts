// package: routerprotocol.routerchain.voyager
// file: routerchain/voyager/funds_paid_request.proto

import * as jspb from "google-protobuf";
import * as multichain_chain_type_pb from "../../multichain/chain_type_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../cosmos/base/v1beta1/coin_pb";
import * as gogoproto_gogo_pb from "../../gogoproto/gogo_pb";

export class FundsPaidRequest extends jspb.Message {
  getSrcchainid(): string;
  setSrcchainid(value: string): void;

  getSrcchaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcchaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getSrctxhash(): string;
  setSrctxhash(value: string): void;

  getSrctimestamp(): number;
  setSrctimestamp(value: number): void;

  getContract(): string;
  setContract(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getBlockheight(): number;
  setBlockheight(value: number): void;

  getMessagehash(): Uint8Array | string;
  getMessagehash_asU8(): Uint8Array;
  getMessagehash_asB64(): string;
  setMessagehash(value: Uint8Array | string): void;

  getForwarder(): string;
  setForwarder(value: string): void;

  getForwarderrouteraddr(): Uint8Array | string;
  getForwarderrouteraddr_asU8(): Uint8Array;
  getForwarderrouteraddr_asB64(): string;
  setForwarderrouteraddr(value: Uint8Array | string): void;

  getStatus(): string;
  setStatus(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FundsPaidRequest.AsObject;
  static toObject(includeInstance: boolean, msg: FundsPaidRequest): FundsPaidRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FundsPaidRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FundsPaidRequest;
  static deserializeBinaryFromReader(message: FundsPaidRequest, reader: jspb.BinaryReader): FundsPaidRequest;
}

export namespace FundsPaidRequest {
  export type AsObject = {
    srcchainid: string,
    srcchaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    srctxhash: string,
    srctimestamp: number,
    contract: string,
    eventnonce: number,
    blockheight: number,
    messagehash: Uint8Array | string,
    forwarder: string,
    forwarderrouteraddr: Uint8Array | string,
    status: string,
  }
}

export class FundsPaidRequestClaimHash extends jspb.Message {
  getSrcchainid(): string;
  setSrcchainid(value: string): void;

  getSrcchaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcchaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getSrctxhash(): string;
  setSrctxhash(value: string): void;

  getSrctimestamp(): number;
  setSrctimestamp(value: number): void;

  getContract(): string;
  setContract(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getBlockheight(): number;
  setBlockheight(value: number): void;

  getMessagehash(): Uint8Array | string;
  getMessagehash_asU8(): Uint8Array;
  getMessagehash_asB64(): string;
  setMessagehash(value: Uint8Array | string): void;

  getForwarder(): string;
  setForwarder(value: string): void;

  getForwarderrouteraddr(): Uint8Array | string;
  getForwarderrouteraddr_asU8(): Uint8Array;
  getForwarderrouteraddr_asB64(): string;
  setForwarderrouteraddr(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): FundsPaidRequestClaimHash.AsObject;
  static toObject(includeInstance: boolean, msg: FundsPaidRequestClaimHash): FundsPaidRequestClaimHash.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: FundsPaidRequestClaimHash, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): FundsPaidRequestClaimHash;
  static deserializeBinaryFromReader(message: FundsPaidRequestClaimHash, reader: jspb.BinaryReader): FundsPaidRequestClaimHash;
}

export namespace FundsPaidRequestClaimHash {
  export type AsObject = {
    srcchainid: string,
    srcchaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    srctxhash: string,
    srctimestamp: number,
    contract: string,
    eventnonce: number,
    blockheight: number,
    messagehash: Uint8Array | string,
    forwarder: string,
    forwarderrouteraddr: Uint8Array | string,
  }
}

