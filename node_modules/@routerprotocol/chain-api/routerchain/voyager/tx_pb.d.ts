// package: routerprotocol.routerchain.voyager
// file: routerchain/voyager/tx.proto

import * as jspb from "google-protobuf";
import * as multichain_chain_type_pb from "../../multichain/chain_type_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../cosmos/base/v1beta1/coin_pb";
import * as gogoproto_gogo_pb from "../../gogoproto/gogo_pb";

export class MsgFundsDeposited extends jspb.Message {
  getOrchestrator(): string;
  setOrchestrator(value: string): void;

  getSrcchainid(): string;
  setSrcchainid(value: string): void;

  getSrcchaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcchaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getSrctxhash(): string;
  setSrctxhash(value: string): void;

  getSrctimestamp(): number;
  setSrctimestamp(value: number): void;

  getContract(): string;
  setContract(value: string): void;

  getDepositId(): number;
  setDepositId(value: number): void;

  getBlockheight(): number;
  setBlockheight(value: number): void;

  getDestchainid(): Uint8Array | string;
  getDestchainid_asU8(): Uint8Array;
  getDestchainid_asB64(): string;
  setDestchainid(value: Uint8Array | string): void;

  getAmount(): string;
  setAmount(value: string): void;

  getRelayerfees(): string;
  setRelayerfees(value: string): void;

  getSrctoken(): string;
  setSrctoken(value: string): void;

  getRecipient(): Uint8Array | string;
  getRecipient_asU8(): Uint8Array;
  getRecipient_asB64(): string;
  setRecipient(value: Uint8Array | string): void;

  getDepositor(): string;
  setDepositor(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgFundsDeposited.AsObject;
  static toObject(includeInstance: boolean, msg: MsgFundsDeposited): MsgFundsDeposited.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgFundsDeposited, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgFundsDeposited;
  static deserializeBinaryFromReader(message: MsgFundsDeposited, reader: jspb.BinaryReader): MsgFundsDeposited;
}

export namespace MsgFundsDeposited {
  export type AsObject = {
    orchestrator: string,
    srcchainid: string,
    srcchaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    srctxhash: string,
    srctimestamp: number,
    contract: string,
    depositId: number,
    blockheight: number,
    destchainid: Uint8Array | string,
    amount: string,
    relayerfees: string,
    srctoken: string,
    recipient: Uint8Array | string,
    depositor: string,
  }
}

export class MsgFundsDepositedResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgFundsDepositedResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgFundsDepositedResponse): MsgFundsDepositedResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgFundsDepositedResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgFundsDepositedResponse;
  static deserializeBinaryFromReader(message: MsgFundsDepositedResponse, reader: jspb.BinaryReader): MsgFundsDepositedResponse;
}

export namespace MsgFundsDepositedResponse {
  export type AsObject = {
  }
}

export class MsgFundsPaid extends jspb.Message {
  getOrchestrator(): string;
  setOrchestrator(value: string): void;

  getSrcchainid(): string;
  setSrcchainid(value: string): void;

  getSrcchaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcchaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getSrctxhash(): string;
  setSrctxhash(value: string): void;

  getSrctimestamp(): number;
  setSrctimestamp(value: number): void;

  getContract(): string;
  setContract(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getBlockheight(): number;
  setBlockheight(value: number): void;

  getMessagehash(): Uint8Array | string;
  getMessagehash_asU8(): Uint8Array;
  getMessagehash_asB64(): string;
  setMessagehash(value: Uint8Array | string): void;

  getForwarder(): string;
  setForwarder(value: string): void;

  getForwarderrouteraddr(): Uint8Array | string;
  getForwarderrouteraddr_asU8(): Uint8Array;
  getForwarderrouteraddr_asB64(): string;
  setForwarderrouteraddr(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgFundsPaid.AsObject;
  static toObject(includeInstance: boolean, msg: MsgFundsPaid): MsgFundsPaid.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgFundsPaid, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgFundsPaid;
  static deserializeBinaryFromReader(message: MsgFundsPaid, reader: jspb.BinaryReader): MsgFundsPaid;
}

export namespace MsgFundsPaid {
  export type AsObject = {
    orchestrator: string,
    srcchainid: string,
    srcchaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    srctxhash: string,
    srctimestamp: number,
    contract: string,
    eventnonce: number,
    blockheight: number,
    messagehash: Uint8Array | string,
    forwarder: string,
    forwarderrouteraddr: Uint8Array | string,
  }
}

export class MsgFundsPaidResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgFundsPaidResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgFundsPaidResponse): MsgFundsPaidResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgFundsPaidResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgFundsPaidResponse;
  static deserializeBinaryFromReader(message: MsgFundsPaidResponse, reader: jspb.BinaryReader): MsgFundsPaidResponse;
}

export namespace MsgFundsPaidResponse {
  export type AsObject = {
  }
}

