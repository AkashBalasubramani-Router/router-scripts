// package: routerprotocol.routerchain.voyager
// file: routerchain/voyager/events.proto

import * as jspb from "google-protobuf";
import * as multichain_chain_type_pb from "../../multichain/chain_type_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../cosmos/base/v1beta1/coin_pb";
import * as gogoproto_gogo_pb from "../../gogoproto/gogo_pb";

export class EventFundDepositRequestCreated extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcchainid(): string;
  setSrcchainid(value: string): void;

  getSrcchaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcchaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getSrctxhash(): string;
  setSrctxhash(value: string): void;

  getSrctimestamp(): number;
  setSrctimestamp(value: number): void;

  getContract(): string;
  setContract(value: string): void;

  getDepositId(): number;
  setDepositId(value: number): void;

  getBlockheight(): number;
  setBlockheight(value: number): void;

  getDestchainid(): Uint8Array | string;
  getDestchainid_asU8(): Uint8Array;
  getDestchainid_asB64(): string;
  setDestchainid(value: Uint8Array | string): void;

  getAmount(): string;
  setAmount(value: string): void;

  getRelayerfees(): string;
  setRelayerfees(value: string): void;

  getSrctoken(): string;
  setSrctoken(value: string): void;

  getRecipient(): Uint8Array | string;
  getRecipient_asU8(): Uint8Array;
  getRecipient_asB64(): string;
  setRecipient(value: Uint8Array | string): void;

  getDepositor(): string;
  setDepositor(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundDepositRequestCreated.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundDepositRequestCreated): EventFundDepositRequestCreated.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundDepositRequestCreated, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundDepositRequestCreated;
  static deserializeBinaryFromReader(message: EventFundDepositRequestCreated, reader: jspb.BinaryReader): EventFundDepositRequestCreated;
}

export namespace EventFundDepositRequestCreated {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcchainid: string,
    srcchaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    srctxhash: string,
    srctimestamp: number,
    contract: string,
    depositId: number,
    blockheight: number,
    destchainid: Uint8Array | string,
    amount: string,
    relayerfees: string,
    srctoken: string,
    recipient: Uint8Array | string,
    depositor: string,
  }
}

export class EventFundDepositRequestValidated extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getDepositId(): number;
  setDepositId(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundDepositRequestValidated.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundDepositRequestValidated): EventFundDepositRequestValidated.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundDepositRequestValidated, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundDepositRequestValidated;
  static deserializeBinaryFromReader(message: EventFundDepositRequestValidated, reader: jspb.BinaryReader): EventFundDepositRequestValidated;
}

export namespace EventFundDepositRequestValidated {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcChainId: string,
    depositId: number,
  }
}

export class EventFundDepositRequestExecuted extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getDepositId(): number;
  setDepositId(value: number): void;

  getExecResponse(): Uint8Array | string;
  getExecResponse_asU8(): Uint8Array;
  getExecResponse_asB64(): string;
  setExecResponse(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundDepositRequestExecuted.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundDepositRequestExecuted): EventFundDepositRequestExecuted.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundDepositRequestExecuted, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundDepositRequestExecuted;
  static deserializeBinaryFromReader(message: EventFundDepositRequestExecuted, reader: jspb.BinaryReader): EventFundDepositRequestExecuted;
}

export namespace EventFundDepositRequestExecuted {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcChainId: string,
    depositId: number,
    execResponse: Uint8Array | string,
  }
}

export class EventFundDepositRequestExecutionFailed extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getDepositId(): number;
  setDepositId(value: number): void;

  getExecErrResponse(): Uint8Array | string;
  getExecErrResponse_asU8(): Uint8Array;
  getExecErrResponse_asB64(): string;
  setExecErrResponse(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundDepositRequestExecutionFailed.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundDepositRequestExecutionFailed): EventFundDepositRequestExecutionFailed.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundDepositRequestExecutionFailed, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundDepositRequestExecutionFailed;
  static deserializeBinaryFromReader(message: EventFundDepositRequestExecutionFailed, reader: jspb.BinaryReader): EventFundDepositRequestExecutionFailed;
}

export namespace EventFundDepositRequestExecutionFailed {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcChainId: string,
    depositId: number,
    execErrResponse: Uint8Array | string,
  }
}

export class EventFundPaidRequestCreated extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcchainid(): string;
  setSrcchainid(value: string): void;

  getSrcchaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcchaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getSrctxhash(): string;
  setSrctxhash(value: string): void;

  getSrctimestamp(): number;
  setSrctimestamp(value: number): void;

  getContract(): string;
  setContract(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getBlockheight(): number;
  setBlockheight(value: number): void;

  getMessagehash(): Uint8Array | string;
  getMessagehash_asU8(): Uint8Array;
  getMessagehash_asB64(): string;
  setMessagehash(value: Uint8Array | string): void;

  getForwarder(): string;
  setForwarder(value: string): void;

  getForwarderrouteraddr(): Uint8Array | string;
  getForwarderrouteraddr_asU8(): Uint8Array;
  getForwarderrouteraddr_asB64(): string;
  setForwarderrouteraddr(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundPaidRequestCreated.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundPaidRequestCreated): EventFundPaidRequestCreated.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundPaidRequestCreated, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundPaidRequestCreated;
  static deserializeBinaryFromReader(message: EventFundPaidRequestCreated, reader: jspb.BinaryReader): EventFundPaidRequestCreated;
}

export namespace EventFundPaidRequestCreated {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcchainid: string,
    srcchaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    srctxhash: string,
    srctimestamp: number,
    contract: string,
    eventnonce: number,
    blockheight: number,
    messagehash: Uint8Array | string,
    forwarder: string,
    forwarderrouteraddr: Uint8Array | string,
  }
}

export class EventFundPaidRequestValidated extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundPaidRequestValidated.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundPaidRequestValidated): EventFundPaidRequestValidated.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundPaidRequestValidated, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundPaidRequestValidated;
  static deserializeBinaryFromReader(message: EventFundPaidRequestValidated, reader: jspb.BinaryReader): EventFundPaidRequestValidated;
}

export namespace EventFundPaidRequestValidated {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcChainId: string,
    eventnonce: number,
  }
}

export class EventFundPaidRequestExecuted extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getExecResponse(): Uint8Array | string;
  getExecResponse_asU8(): Uint8Array;
  getExecResponse_asB64(): string;
  setExecResponse(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundPaidRequestExecuted.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundPaidRequestExecuted): EventFundPaidRequestExecuted.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundPaidRequestExecuted, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundPaidRequestExecuted;
  static deserializeBinaryFromReader(message: EventFundPaidRequestExecuted, reader: jspb.BinaryReader): EventFundPaidRequestExecuted;
}

export namespace EventFundPaidRequestExecuted {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcChainId: string,
    eventnonce: number,
    execResponse: Uint8Array | string,
  }
}

export class EventFundPaidRequestExecutionFailed extends jspb.Message {
  getAttestationId(): Uint8Array | string;
  getAttestationId_asU8(): Uint8Array;
  getAttestationId_asB64(): string;
  setAttestationId(value: Uint8Array | string): void;

  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getEventnonce(): number;
  setEventnonce(value: number): void;

  getExecErrResponse(): Uint8Array | string;
  getExecErrResponse_asU8(): Uint8Array;
  getExecErrResponse_asB64(): string;
  setExecErrResponse(value: Uint8Array | string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFundPaidRequestExecutionFailed.AsObject;
  static toObject(includeInstance: boolean, msg: EventFundPaidRequestExecutionFailed): EventFundPaidRequestExecutionFailed.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFundPaidRequestExecutionFailed, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFundPaidRequestExecutionFailed;
  static deserializeBinaryFromReader(message: EventFundPaidRequestExecutionFailed, reader: jspb.BinaryReader): EventFundPaidRequestExecutionFailed;
}

export namespace EventFundPaidRequestExecutionFailed {
  export type AsObject = {
    attestationId: Uint8Array | string,
    srcChainId: string,
    eventnonce: number,
    execErrResponse: Uint8Array | string,
  }
}

