// package: routerprotocol.routerchain.voyager
// file: routerchain/voyager/query.proto

import * as routerchain_voyager_query_pb from "../../routerchain/voyager/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryParams = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_voyager_query_pb.QueryParamsRequest;
  readonly responseType: typeof routerchain_voyager_query_pb.QueryParamsResponse;
};

type QueryFundDepositRequest = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_voyager_query_pb.QueryGetFundDepositRequestRequest;
  readonly responseType: typeof routerchain_voyager_query_pb.QueryGetFundDepositRequestResponse;
};

type QueryFundDepositRequestAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_voyager_query_pb.QueryAllFundDepositRequestRequest;
  readonly responseType: typeof routerchain_voyager_query_pb.QueryAllFundDepositRequestResponse;
};

type QueryFundsPaidRequest = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_voyager_query_pb.QueryGetFundsPaidRequestRequest;
  readonly responseType: typeof routerchain_voyager_query_pb.QueryGetFundsPaidRequestResponse;
};

type QueryFundsPaidRequestAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_voyager_query_pb.QueryAllFundsPaidRequestRequest;
  readonly responseType: typeof routerchain_voyager_query_pb.QueryAllFundsPaidRequestResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly Params: QueryParams;
  static readonly FundDepositRequest: QueryFundDepositRequest;
  static readonly FundDepositRequestAll: QueryFundDepositRequestAll;
  static readonly FundsPaidRequest: QueryFundsPaidRequest;
  static readonly FundsPaidRequestAll: QueryFundsPaidRequestAll;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  params(
    requestMessage: routerchain_voyager_query_pb.QueryParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  params(
    requestMessage: routerchain_voyager_query_pb.QueryParamsRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  fundDepositRequest(
    requestMessage: routerchain_voyager_query_pb.QueryGetFundDepositRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryGetFundDepositRequestResponse|null) => void
  ): UnaryResponse;
  fundDepositRequest(
    requestMessage: routerchain_voyager_query_pb.QueryGetFundDepositRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryGetFundDepositRequestResponse|null) => void
  ): UnaryResponse;
  fundDepositRequestAll(
    requestMessage: routerchain_voyager_query_pb.QueryAllFundDepositRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryAllFundDepositRequestResponse|null) => void
  ): UnaryResponse;
  fundDepositRequestAll(
    requestMessage: routerchain_voyager_query_pb.QueryAllFundDepositRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryAllFundDepositRequestResponse|null) => void
  ): UnaryResponse;
  fundsPaidRequest(
    requestMessage: routerchain_voyager_query_pb.QueryGetFundsPaidRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryGetFundsPaidRequestResponse|null) => void
  ): UnaryResponse;
  fundsPaidRequest(
    requestMessage: routerchain_voyager_query_pb.QueryGetFundsPaidRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryGetFundsPaidRequestResponse|null) => void
  ): UnaryResponse;
  fundsPaidRequestAll(
    requestMessage: routerchain_voyager_query_pb.QueryAllFundsPaidRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryAllFundsPaidRequestResponse|null) => void
  ): UnaryResponse;
  fundsPaidRequestAll(
    requestMessage: routerchain_voyager_query_pb.QueryAllFundsPaidRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_voyager_query_pb.QueryAllFundsPaidRequestResponse|null) => void
  ): UnaryResponse;
}

