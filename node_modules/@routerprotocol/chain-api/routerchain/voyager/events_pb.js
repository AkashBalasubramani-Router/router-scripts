// source: routerchain/voyager/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var multichain_chain_type_pb = require('../../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.displayName = 'proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcchainid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    srcchaintype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    srctxhash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    srctimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    contract: jspb.Message.getFieldWithDefault(msg, 6, ""),
    depositId: jspb.Message.getFieldWithDefault(msg, 7, 0),
    blockheight: jspb.Message.getFieldWithDefault(msg, 8, 0),
    destchainid: msg.getDestchainid_asB64(),
    amount: jspb.Message.getFieldWithDefault(msg, 10, ""),
    relayerfees: jspb.Message.getFieldWithDefault(msg, 11, ""),
    srctoken: jspb.Message.getFieldWithDefault(msg, 12, ""),
    recipient: msg.getRecipient_asB64(),
    depositor: jspb.Message.getFieldWithDefault(msg, 14, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated;
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcchainid(value);
      break;
    case 3:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setSrcchaintype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctxhash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSrctimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositId(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDestchainid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerfees(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctoken(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecipient(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setDepositor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcchainid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSrcchaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSrctxhash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSrctimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getDepositId();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getDestchainid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRelayerfees();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSrctoken();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getRecipient_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getDepositor();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string srcChainId = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getSrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setSrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType srcChainType = 3;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getSrcchaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setSrcchaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string srcTxHash = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getSrctxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setSrctxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 srcTimestamp = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getSrctimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setSrctimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string contract = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 deposit_id = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getDepositId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setDepositId = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 blockHeight = 8;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes destChainId = 9;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getDestchainid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes destChainId = 9;
 * This is a type-conversion wrapper around `getDestchainid()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getDestchainid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDestchainid()));
};


/**
 * optional bytes destChainId = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDestchainid()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getDestchainid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDestchainid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setDestchainid = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional string amount = 10;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string relayerFees = 11;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getRelayerfees = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setRelayerfees = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string srcToken = 12;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getSrctoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setSrctoken = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes recipient = 13;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getRecipient = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes recipient = 13;
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getRecipient_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecipient()));
};


/**
 * optional bytes recipient = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecipient()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getRecipient_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecipient()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setRecipient = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional string depositor = 14;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.getDepositor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestCreated.prototype.setDepositor = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    depositId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated;
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDepositId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 deposit_id = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.getDepositId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestValidated.prototype.setDepositId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    depositId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    execResponse: msg.getExecResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted;
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDepositId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExecResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 deposit_id = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getDepositId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.setDepositId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes exec_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getExecResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes exec_response = 4;
 * This is a type-conversion wrapper around `getExecResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getExecResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecResponse()));
};


/**
 * optional bytes exec_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.getExecResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecuted.prototype.setExecResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    depositId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    execErrResponse: msg.getExecErrResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed;
  return proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepositId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecErrResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDepositId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExecErrResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 deposit_id = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getDepositId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.setDepositId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes exec_err_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getExecErrResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes exec_err_response = 4;
 * This is a type-conversion wrapper around `getExecErrResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getExecErrResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecErrResponse()));
};


/**
 * optional bytes exec_err_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecErrResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.getExecErrResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecErrResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundDepositRequestExecutionFailed.prototype.setExecErrResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcchainid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    srcchaintype: jspb.Message.getFieldWithDefault(msg, 3, 0),
    srctxhash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    srctimestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    contract: jspb.Message.getFieldWithDefault(msg, 6, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    blockheight: jspb.Message.getFieldWithDefault(msg, 8, 0),
    messagehash: msg.getMessagehash_asB64(),
    forwarder: jspb.Message.getFieldWithDefault(msg, 10, ""),
    forwarderrouteraddr: msg.getForwarderrouteraddr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated;
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcchainid(value);
      break;
    case 3:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setSrcchaintype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctxhash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSrctimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessagehash(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setForwarder(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setForwarderrouteraddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcchainid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSrcchaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSrctxhash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSrctimestamp();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getMessagehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getForwarder();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getForwarderrouteraddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string srcChainId = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getSrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setSrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType srcChainType = 3;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getSrcchaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setSrcchaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string srcTxHash = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getSrctxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setSrctxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 srcTimestamp = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getSrctimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setSrctimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string contract = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 eventNonce = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 blockHeight = 8;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bytes messageHash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getMessagehash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes messageHash = 9;
 * This is a type-conversion wrapper around `getMessagehash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getMessagehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessagehash()));
};


/**
 * optional bytes messageHash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessagehash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getMessagehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessagehash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setMessagehash = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional string forwarder = 10;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getForwarder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setForwarder = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes forwarderRouterAddr = 11;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getForwarderrouteraddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes forwarderRouterAddr = 11;
 * This is a type-conversion wrapper around `getForwarderrouteraddr()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getForwarderrouteraddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getForwarderrouteraddr()));
};


/**
 * optional bytes forwarderRouterAddr = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getForwarderrouteraddr()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.getForwarderrouteraddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getForwarderrouteraddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestCreated.prototype.setForwarderrouteraddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated;
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 eventNonce = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestValidated.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    execResponse: msg.getExecResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted;
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExecResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 eventNonce = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes exec_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getExecResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes exec_response = 4;
 * This is a type-conversion wrapper around `getExecResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getExecResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecResponse()));
};


/**
 * optional bytes exec_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.getExecResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecuted.prototype.setExecResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventnonce: jspb.Message.getFieldWithDefault(msg, 3, 0),
    execErrResponse: msg.getExecErrResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed;
  return proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEventnonce(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecErrResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventnonce();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExecErrResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 eventNonce = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getEventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.setEventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes exec_err_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getExecErrResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes exec_err_response = 4;
 * This is a type-conversion wrapper around `getExecErrResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getExecErrResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecErrResponse()));
};


/**
 * optional bytes exec_err_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecErrResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.getExecErrResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecErrResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.voyager.EventFundPaidRequestExecutionFailed.prototype.setExecErrResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.voyager);
