// package: routerprotocol.routerchain.pricefeed
// file: routerchain/pricefeed/tx.proto

import * as jspb from "google-protobuf";
import * as gogoproto_gogo_pb from "../../gogoproto/gogo_pb";
import * as routerchain_pricefeed_price_pb from "../../routerchain/pricefeed/price_pb";
import * as routerchain_pricefeed_gas_price_pb from "../../routerchain/pricefeed/gas_price_pb";

export class MsgTokenPrices extends jspb.Message {
  getPriceFeederAddress(): string;
  setPriceFeederAddress(value: string): void;

  getPriceFeederName(): string;
  setPriceFeederName(value: string): void;

  clearTokenPricesList(): void;
  getTokenPricesList(): Array<routerchain_pricefeed_price_pb.Price>;
  setTokenPricesList(value: Array<routerchain_pricefeed_price_pb.Price>): void;
  addTokenPrices(value?: routerchain_pricefeed_price_pb.Price, index?: number): routerchain_pricefeed_price_pb.Price;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTokenPrices.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTokenPrices): MsgTokenPrices.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTokenPrices, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTokenPrices;
  static deserializeBinaryFromReader(message: MsgTokenPrices, reader: jspb.BinaryReader): MsgTokenPrices;
}

export namespace MsgTokenPrices {
  export type AsObject = {
    priceFeederAddress: string,
    priceFeederName: string,
    tokenPricesList: Array<routerchain_pricefeed_price_pb.Price.AsObject>,
  }
}

export class MsgTokenPricesResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgTokenPricesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgTokenPricesResponse): MsgTokenPricesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgTokenPricesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgTokenPricesResponse;
  static deserializeBinaryFromReader(message: MsgTokenPricesResponse, reader: jspb.BinaryReader): MsgTokenPricesResponse;
}

export namespace MsgTokenPricesResponse {
  export type AsObject = {
  }
}

export class MsgGasPrices extends jspb.Message {
  getPriceFeederAddress(): string;
  setPriceFeederAddress(value: string): void;

  getPriceFeederName(): string;
  setPriceFeederName(value: string): void;

  clearGasPricesList(): void;
  getGasPricesList(): Array<routerchain_pricefeed_gas_price_pb.GasPrice>;
  setGasPricesList(value: Array<routerchain_pricefeed_gas_price_pb.GasPrice>): void;
  addGasPrices(value?: routerchain_pricefeed_gas_price_pb.GasPrice, index?: number): routerchain_pricefeed_gas_price_pb.GasPrice;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgGasPrices.AsObject;
  static toObject(includeInstance: boolean, msg: MsgGasPrices): MsgGasPrices.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgGasPrices, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgGasPrices;
  static deserializeBinaryFromReader(message: MsgGasPrices, reader: jspb.BinaryReader): MsgGasPrices;
}

export namespace MsgGasPrices {
  export type AsObject = {
    priceFeederAddress: string,
    priceFeederName: string,
    gasPricesList: Array<routerchain_pricefeed_gas_price_pb.GasPrice.AsObject>,
  }
}

export class MsgGasPricesResponse extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MsgGasPricesResponse.AsObject;
  static toObject(includeInstance: boolean, msg: MsgGasPricesResponse): MsgGasPricesResponse.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MsgGasPricesResponse, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MsgGasPricesResponse;
  static deserializeBinaryFromReader(message: MsgGasPricesResponse, reader: jspb.BinaryReader): MsgGasPricesResponse;
}

export namespace MsgGasPricesResponse {
  export type AsObject = {
  }
}

