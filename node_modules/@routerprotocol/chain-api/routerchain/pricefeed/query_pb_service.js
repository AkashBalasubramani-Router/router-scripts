// package: routerprotocol.routerchain.pricefeed
// file: routerchain/pricefeed/query.proto

var routerchain_pricefeed_query_pb = require("../../routerchain/pricefeed/query_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "routerprotocol.routerchain.pricefeed.Query";
  return Query;
}());

Query.Params = {
  methodName: "Params",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryParamsRequest,
  responseType: routerchain_pricefeed_query_pb.QueryParamsResponse
};

Query.Price = {
  methodName: "Price",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryGetPriceRequest,
  responseType: routerchain_pricefeed_query_pb.QueryGetPriceResponse
};

Query.PriceAll = {
  methodName: "PriceAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryAllPriceRequest,
  responseType: routerchain_pricefeed_query_pb.QueryAllPriceResponse
};

Query.SymbolRequest = {
  methodName: "SymbolRequest",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryGetSymbolRequestRequest,
  responseType: routerchain_pricefeed_query_pb.QueryGetSymbolRequestResponse
};

Query.SymbolRequestAll = {
  methodName: "SymbolRequestAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryAllSymbolRequestRequest,
  responseType: routerchain_pricefeed_query_pb.QueryAllSymbolRequestResponse
};

Query.PriceFeederInfo = {
  methodName: "PriceFeederInfo",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryGetPriceFeederInfoRequest,
  responseType: routerchain_pricefeed_query_pb.QueryGetPriceFeederInfoResponse
};

Query.PriceFeederInfoAll = {
  methodName: "PriceFeederInfoAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryAllPriceFeederInfoRequest,
  responseType: routerchain_pricefeed_query_pb.QueryAllPriceFeederInfoResponse
};

Query.GasPrice = {
  methodName: "GasPrice",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryGetGasPriceRequest,
  responseType: routerchain_pricefeed_query_pb.QueryGetGasPriceResponse
};

Query.GasPriceAll = {
  methodName: "GasPriceAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_pricefeed_query_pb.QueryAllGasPriceRequest,
  responseType: routerchain_pricefeed_query_pb.QueryAllGasPriceResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.params = function params(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Params, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.price = function price(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Price, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.priceAll = function priceAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.PriceAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.symbolRequest = function symbolRequest(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SymbolRequest, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.symbolRequestAll = function symbolRequestAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.SymbolRequestAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.priceFeederInfo = function priceFeederInfo(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.PriceFeederInfo, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.priceFeederInfoAll = function priceFeederInfoAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.PriceFeederInfoAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.gasPrice = function gasPrice(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.GasPrice, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.gasPriceAll = function gasPriceAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.GasPriceAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

