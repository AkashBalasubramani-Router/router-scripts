// package: routerprotocol.routerchain.crosschain
// file: routerchain/crosschain/crosschain_request.proto

import * as jspb from "google-protobuf";
import * as multichain_chain_type_pb from "../../multichain/chain_type_pb";
import * as cosmos_base_v1beta1_coin_pb from "../../cosmos/base/v1beta1/coin_pb";
import * as gogoproto_gogo_pb from "../../gogoproto/gogo_pb";
import * as routerchain_crosschain_crosschain_tx_status_pb from "../../routerchain/crosschain/crosschain_tx_status_pb";

export class CrosschainRequest extends jspb.Message {
  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getContract(): string;
  setContract(value: string): void;

  getRequestIdentifier(): number;
  setRequestIdentifier(value: number): void;

  getBlockHeight(): number;
  setBlockHeight(value: number): void;

  getSourceTxHash(): string;
  setSourceTxHash(value: string): void;

  getSrcTimestamp(): number;
  setSrcTimestamp(value: number): void;

  getSrcTxOrigin(): string;
  setSrcTxOrigin(value: string): void;

  getRouteAmount(): string;
  setRouteAmount(value: string): void;

  getRouteRecipient(): string;
  setRouteRecipient(value: string): void;

  getDestChainId(): string;
  setDestChainId(value: string): void;

  getDestGasLimit(): number;
  setDestGasLimit(value: number): void;

  getDestGasPrice(): number;
  setDestGasPrice(value: number): void;

  hasRelayerIncentive(): boolean;
  clearRelayerIncentive(): void;
  getRelayerIncentive(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setRelayerIncentive(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  getRequestSender(): string;
  setRequestSender(value: string): void;

  getRequestMetadata(): Uint8Array | string;
  getRequestMetadata_asU8(): Uint8Array;
  getRequestMetadata_asB64(): string;
  setRequestMetadata(value: Uint8Array | string): void;

  getRequestPacket(): Uint8Array | string;
  getRequestPacket_asU8(): Uint8Array;
  getRequestPacket_asB64(): string;
  setRequestPacket(value: Uint8Array | string): void;

  getSrcChainType(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcChainType(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getDestChainType(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setDestChainType(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  hasDestTxFeeDeducted(): boolean;
  clearDestTxFeeDeducted(): void;
  getDestTxFeeDeducted(): cosmos_base_v1beta1_coin_pb.Coin | undefined;
  setDestTxFeeDeducted(value?: cosmos_base_v1beta1_coin_pb.Coin): void;

  getStatus(): routerchain_crosschain_crosschain_tx_status_pb.CrosschainTxStatusMap[keyof routerchain_crosschain_crosschain_tx_status_pb.CrosschainTxStatusMap];
  setStatus(value: routerchain_crosschain_crosschain_tx_status_pb.CrosschainTxStatusMap[keyof routerchain_crosschain_crosschain_tx_status_pb.CrosschainTxStatusMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CrosschainRequest.AsObject;
  static toObject(includeInstance: boolean, msg: CrosschainRequest): CrosschainRequest.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CrosschainRequest, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CrosschainRequest;
  static deserializeBinaryFromReader(message: CrosschainRequest, reader: jspb.BinaryReader): CrosschainRequest;
}

export namespace CrosschainRequest {
  export type AsObject = {
    srcChainId: string,
    contract: string,
    requestIdentifier: number,
    blockHeight: number,
    sourceTxHash: string,
    srcTimestamp: number,
    srcTxOrigin: string,
    routeAmount: string,
    routeRecipient: string,
    destChainId: string,
    destGasLimit: number,
    destGasPrice: number,
    relayerIncentive?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
    requestSender: string,
    requestMetadata: Uint8Array | string,
    requestPacket: Uint8Array | string,
    srcChainType: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    destChainType: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    destTxFeeDeducted?: cosmos_base_v1beta1_coin_pb.Coin.AsObject,
    status: routerchain_crosschain_crosschain_tx_status_pb.CrosschainTxStatusMap[keyof routerchain_crosschain_crosschain_tx_status_pb.CrosschainTxStatusMap],
  }
}

export class CrosschainRequestClaimHash extends jspb.Message {
  getSrcChainId(): string;
  setSrcChainId(value: string): void;

  getContract(): string;
  setContract(value: string): void;

  getRequestIdentifier(): number;
  setRequestIdentifier(value: number): void;

  getBlockHeight(): number;
  setBlockHeight(value: number): void;

  getSourceTxHash(): string;
  setSourceTxHash(value: string): void;

  getSrcTimestamp(): number;
  setSrcTimestamp(value: number): void;

  getSrcTxOrigin(): string;
  setSrcTxOrigin(value: string): void;

  getRouteAmount(): string;
  setRouteAmount(value: string): void;

  getRouteRecipient(): string;
  setRouteRecipient(value: string): void;

  getDestChainId(): string;
  setDestChainId(value: string): void;

  getRequestSender(): string;
  setRequestSender(value: string): void;

  getRequestMetadata(): Uint8Array | string;
  getRequestMetadata_asU8(): Uint8Array;
  getRequestMetadata_asB64(): string;
  setRequestMetadata(value: Uint8Array | string): void;

  getRequestPacket(): Uint8Array | string;
  getRequestPacket_asU8(): Uint8Array;
  getRequestPacket_asB64(): string;
  setRequestPacket(value: Uint8Array | string): void;

  getSrcChainType(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setSrcChainType(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getDestChainType(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setDestChainType(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CrosschainRequestClaimHash.AsObject;
  static toObject(includeInstance: boolean, msg: CrosschainRequestClaimHash): CrosschainRequestClaimHash.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CrosschainRequestClaimHash, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CrosschainRequestClaimHash;
  static deserializeBinaryFromReader(message: CrosschainRequestClaimHash, reader: jspb.BinaryReader): CrosschainRequestClaimHash;
}

export namespace CrosschainRequestClaimHash {
  export type AsObject = {
    srcChainId: string,
    contract: string,
    requestIdentifier: number,
    blockHeight: number,
    sourceTxHash: string,
    srcTimestamp: number,
    srcTxOrigin: string,
    routeAmount: string,
    routeRecipient: string,
    destChainId: string,
    requestSender: string,
    requestMetadata: Uint8Array | string,
    requestPacket: Uint8Array | string,
    srcChainType: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    destChainType: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
  }
}

