// source: routerchain/crosschain/crosschain_ack_receipt.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var routerchain_crosschain_crosschain_ack_receipt_tx_status_pb = require('../../routerchain/crosschain/crosschain_ack_receipt_tx_status_pb.js');
goog.object.extend(proto, routerchain_crosschain_crosschain_ack_receipt_tx_status_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.displayName = 'proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.displayName = 'proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackreceiptsrcchainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackReceiptIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ackReceiptBlockheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ackReceiptTxhash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relayerrouteraddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    requestidentifier: jspb.Message.getFieldWithDefault(msg, 7, 0),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    acksrcchainid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    ackrequestidentifier: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ackexecdata: msg.getAckexecdata_asB64(),
    ackexecstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    feeconsumed: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt;
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckreceiptsrcchainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptBlockheight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckReceiptTxhash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerrouteraddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestidentifier(value);
      break;
    case 8:
      var value = /** @type {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptTxStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcksrcchainid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckrequestidentifier(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAckexecdata(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAckexecstatus(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeeconsumed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckreceiptsrcchainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckReceiptIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAckReceiptBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAckReceiptTxhash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelayerrouteraddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getAcksrcchainid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAckrequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getAckexecdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getAckexecstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getFeeconsumed();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
};


/**
 * optional string ackReceiptSrcChainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckreceiptsrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAckreceiptsrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_receipt_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckReceiptIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAckReceiptIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 ack_receipt_blockHeight = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckReceiptBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAckReceiptBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string ack_receipt_txHash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckReceiptTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAckReceiptTxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relayerRouterAddress = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getRelayerrouteraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setRelayerrouteraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 requestIdentifier = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getRequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setRequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional CrosschainAckReceiptTxStatus status = 8;
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptTxStatus}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getStatus = function() {
  return /** @type {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptTxStatus} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptTxStatus} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional string ackSrcChainId = 9;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAcksrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAcksrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 ackRequestIdentifier = 10;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckrequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAckrequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes ackExecData = 11;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckexecdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes ackExecData = 11;
 * This is a type-conversion wrapper around `getAckexecdata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckexecdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAckexecdata()));
};


/**
 * optional bytes ackExecData = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAckexecdata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckexecdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAckexecdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAckexecdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bool ackExecStatus = 12;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getAckexecstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setAckexecstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint64 feeConsumed = 13;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.getFeeconsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceipt.prototype.setFeeconsumed = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackreceiptsrcchainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackReceiptIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ackReceiptBlockheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ackReceiptTxhash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relayerrouteraddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    requestidentifier: jspb.Message.getFieldWithDefault(msg, 7, 0),
    acksrcchainid: jspb.Message.getFieldWithDefault(msg, 8, ""),
    ackrequestidentifier: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ackexecdata: msg.getAckexecdata_asB64(),
    ackexecstatus: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    feeconsumed: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash;
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckreceiptsrcchainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptBlockheight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckReceiptTxhash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerrouteraddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestidentifier(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcksrcchainid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckrequestidentifier(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAckexecdata(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAckexecstatus(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeeconsumed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckreceiptsrcchainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckReceiptIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAckReceiptBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAckReceiptTxhash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelayerrouteraddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getAcksrcchainid();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getAckrequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getAckexecdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getAckexecstatus();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getFeeconsumed();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
};


/**
 * optional string ackReceiptSrcChainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckreceiptsrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAckreceiptsrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_receipt_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckReceiptIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAckReceiptIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 ack_receipt_blockHeight = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckReceiptBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAckReceiptBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string ack_receipt_txHash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckReceiptTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAckReceiptTxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relayerRouterAddress = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getRelayerrouteraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setRelayerrouteraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 requestIdentifier = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getRequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setRequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string ackSrcChainId = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAcksrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAcksrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 ackRequestIdentifier = 9;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckrequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAckrequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional bytes ackExecData = 10;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckexecdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes ackExecData = 10;
 * This is a type-conversion wrapper around `getAckexecdata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckexecdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAckexecdata()));
};


/**
 * optional bytes ackExecData = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAckexecdata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckexecdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAckexecdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAckexecdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bool ackExecStatus = 11;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getAckexecstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setAckexecstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional uint64 feeConsumed = 12;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.getFeeconsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckReceiptClaimHash.prototype.setFeeconsumed = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.crosschain);
