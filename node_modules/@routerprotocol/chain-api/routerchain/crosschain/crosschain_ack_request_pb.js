// source: routerchain/crosschain/crosschain_ack_request.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var multichain_chain_type_pb = require('../../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var routerchain_crosschain_crosschain_ack_tx_status_pb = require('../../routerchain/crosschain/crosschain_ack_tx_status_pb.js');
goog.object.extend(proto, routerchain_crosschain_crosschain_ack_tx_status_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.displayName = 'proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.displayName = 'proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    desttxhash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relayerrouteraddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ackDestChainId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    requestSender: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requestidentifier: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ackSrcChainType: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ackDestChainType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    feeconsumed: jspb.Message.getFieldWithDefault(msg, 12, 0),
    execdata: msg.getExecdata_asB64(),
    execstatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    ethsigner: jspb.Message.getFieldWithDefault(msg, 15, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 16, ""),
    ackGasLimit: jspb.Message.getFieldWithDefault(msg, 17, 0),
    ackGasPrice: jspb.Message.getFieldWithDefault(msg, 18, 0),
    ackFeeDeducted: (f = msg.getAckFeeDeducted()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    ackRelayerIncentive: (f = msg.getAckRelayerIncentive()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 21, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest;
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesttxhash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerrouteraddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckDestChainId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestidentifier(value);
      break;
    case 10:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckSrcChainType(value);
      break;
    case 11:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckDestChainType(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeeconsumed(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecdata(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecstatus(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthsigner(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckGasLimit(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckGasPrice(value);
      break;
    case 19:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAckFeeDeducted(value);
      break;
    case 20:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAckRelayerIncentive(value);
      break;
    case 21:
      var value = /** @type {!proto.routerprotocol.routerchain.crosschain.CrosschainAckTxStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDesttxhash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelayerrouteraddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAckDestChainId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getAckSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getAckDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getFeeconsumed();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getExecdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getExecstatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getEthsigner();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getAckGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = message.getAckGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      18,
      f
    );
  }
  f = message.getAckFeeDeducted();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getAckRelayerIncentive();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      21,
      f
    );
  }
};


/**
 * optional string ack_src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 blockHeight = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string destTxHash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getDesttxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setDesttxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relayerRouterAddress = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getRelayerrouteraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setRelayerrouteraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string ack_dest_chain_id = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string request_sender = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 requestIdentifier = 9;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getRequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setRequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_src_chain_type = 10;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_dest_chain_type = 11;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional uint64 feeConsumed = 12;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getFeeconsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setFeeconsumed = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bytes execData = 13;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getExecdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes execData = 13;
 * This is a type-conversion wrapper around `getExecdata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getExecdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecdata()));
};


/**
 * optional bytes execData = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecdata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getExecdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setExecdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bool execStatus = 14;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getExecstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setExecstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional string ethSigner = 15;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getEthsigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setEthsigner = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


/**
 * optional string signature = 16;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional uint64 ack_gas_limit = 17;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint64 ack_gas_price = 18;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional cosmos.base.v1beta1.Coin ack_fee_deducted = 19;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckFeeDeducted = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 19));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
*/
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckFeeDeducted = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.clearAckFeeDeducted = function() {
  return this.setAckFeeDeducted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.hasAckFeeDeducted = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional cosmos.base.v1beta1.Coin ack_relayer_incentive = 20;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getAckRelayerIncentive = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 20));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
*/
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setAckRelayerIncentive = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.clearAckRelayerIncentive = function() {
  return this.setAckRelayerIncentive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.hasAckRelayerIncentive = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional CrosschainAckTxStatus status = 21;
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckTxStatus}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.getStatus = function() {
  return /** @type {!proto.routerprotocol.routerchain.crosschain.CrosschainAckTxStatus} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckTxStatus} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 21, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    desttxhash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relayerrouteraddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ackDestChainId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    requestSender: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requestidentifier: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ackSrcChainType: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ackDestChainType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    feeconsumed: jspb.Message.getFieldWithDefault(msg, 12, 0),
    execdata: msg.getExecdata_asB64(),
    execstatus: jspb.Message.getBooleanFieldWithDefault(msg, 14, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash;
  return proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesttxhash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerrouteraddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckDestChainId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestidentifier(value);
      break;
    case 10:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckSrcChainType(value);
      break;
    case 11:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckDestChainType(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeeconsumed(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecdata(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecstatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDesttxhash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelayerrouteraddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAckDestChainId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getAckSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getAckDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getFeeconsumed();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getExecdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getExecstatus();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * optional string ack_src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 blockHeight = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string destTxHash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getDesttxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setDesttxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relayerRouterAddress = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getRelayerrouteraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setRelayerrouteraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string ack_dest_chain_id = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getAckDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setAckDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string request_sender = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 requestIdentifier = 9;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getRequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setRequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_src_chain_type = 10;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getAckSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setAckSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_dest_chain_type = 11;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getAckDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setAckDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional uint64 feeConsumed = 12;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getFeeconsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setFeeconsumed = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional bytes execData = 13;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getExecdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes execData = 13;
 * This is a type-conversion wrapper around `getExecdata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getExecdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecdata()));
};


/**
 * optional bytes execData = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecdata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getExecdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setExecdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bool execStatus = 14;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.getExecstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainAckRequestClaimHash.prototype.setExecstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.crosschain);
