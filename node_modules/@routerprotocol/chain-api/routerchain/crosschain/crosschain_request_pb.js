// source: routerchain/crosschain/crosschain_request.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var multichain_chain_type_pb = require('../../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var routerchain_crosschain_crosschain_tx_status_pb = require('../../routerchain/crosschain/crosschain_tx_status_pb.js');
goog.object.extend(proto, routerchain_crosschain_crosschain_tx_status_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.CrosschainRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.CrosschainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.CrosschainRequest.displayName = 'proto.routerprotocol.routerchain.crosschain.CrosschainRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.displayName = 'proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.CrosschainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sourceTxHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    srcTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    srcTxOrigin: jspb.Message.getFieldWithDefault(msg, 7, ""),
    routeAmount: jspb.Message.getFieldWithDefault(msg, 8, ""),
    routeRecipient: jspb.Message.getFieldWithDefault(msg, 9, ""),
    destChainId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    destGasLimit: jspb.Message.getFieldWithDefault(msg, 11, 0),
    destGasPrice: jspb.Message.getFieldWithDefault(msg, 12, 0),
    relayerIncentive: (f = msg.getRelayerIncentive()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    requestSender: jspb.Message.getFieldWithDefault(msg, 14, ""),
    requestMetadata: msg.getRequestMetadata_asB64(),
    requestPacket: msg.getRequestPacket_asB64(),
    srcChainType: jspb.Message.getFieldWithDefault(msg, 17, 0),
    destChainType: jspb.Message.getFieldWithDefault(msg, 18, 0),
    destTxFeeDeducted: (f = msg.getDestTxFeeDeducted()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    status: jspb.Message.getFieldWithDefault(msg, 20, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.CrosschainRequest;
  return proto.routerprotocol.routerchain.crosschain.CrosschainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceTxHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSrcTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcTxOrigin(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteAmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteRecipient(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestChainId(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDestGasLimit(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDestGasPrice(value);
      break;
    case 13:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setRelayerIncentive(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestMetadata(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestPacket(value);
      break;
    case 17:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setSrcChainType(value);
      break;
    case 18:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setDestChainType(value);
      break;
    case 19:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setDestTxFeeDeducted(value);
      break;
    case 20:
      var value = /** @type {!proto.routerprotocol.routerchain.crosschain.CrosschainTxStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.CrosschainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSourceTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSrcTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSrcTxOrigin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRouteAmount();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRouteRecipient();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDestChainId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDestGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
  f = message.getDestGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      12,
      f
    );
  }
  f = message.getRelayerIncentive();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getRequestMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getRequestPacket_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      17,
      f
    );
  }
  f = message.getDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      18,
      f
    );
  }
  f = message.getDestTxFeeDeducted();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      20,
      f
    );
  }
};


/**
 * optional string src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 block_height = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string source_tx_hash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getSourceTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setSourceTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 src_timestamp = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getSrcTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setSrcTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string src_tx_origin = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getSrcTxOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setSrcTxOrigin = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string route_amount = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRouteAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setRouteAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string route_recipient = 9;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRouteRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setRouteRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string dest_chain_id = 10;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional uint64 dest_gas_limit = 11;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getDestGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setDestGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional uint64 dest_gas_price = 12;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getDestGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setDestGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional cosmos.base.v1beta1.Coin relayer_incentive = 13;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRelayerIncentive = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 13));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
*/
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setRelayerIncentive = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.clearRelayerIncentive = function() {
  return this.setRelayerIncentive(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.hasRelayerIncentive = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional string request_sender = 14;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional bytes request_metadata = 15;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes request_metadata = 15;
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestMetadata()));
};


/**
 * optional bytes request_metadata = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setRequestMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional bytes request_packet = 16;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestPacket = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes request_packet = 16;
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestPacket_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestPacket()));
};


/**
 * optional bytes request_packet = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getRequestPacket_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestPacket()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setRequestPacket = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType src_chain_type = 17;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 17, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType dest_chain_type = 18;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 18, value);
};


/**
 * optional cosmos.base.v1beta1.Coin dest_tx_fee_deducted = 19;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getDestTxFeeDeducted = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 19));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
*/
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setDestTxFeeDeducted = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.clearDestTxFeeDeducted = function() {
  return this.setDestTxFeeDeducted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.hasDestTxFeeDeducted = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional CrosschainTxStatus status = 20;
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainTxStatus}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.getStatus = function() {
  return /** @type {!proto.routerprotocol.routerchain.crosschain.CrosschainTxStatus} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainTxStatus} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 20, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sourceTxHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    srcTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    srcTxOrigin: jspb.Message.getFieldWithDefault(msg, 7, ""),
    routeAmount: jspb.Message.getFieldWithDefault(msg, 8, ""),
    routeRecipient: jspb.Message.getFieldWithDefault(msg, 9, ""),
    destChainId: jspb.Message.getFieldWithDefault(msg, 10, ""),
    requestSender: jspb.Message.getFieldWithDefault(msg, 11, ""),
    requestMetadata: msg.getRequestMetadata_asB64(),
    requestPacket: msg.getRequestPacket_asB64(),
    srcChainType: jspb.Message.getFieldWithDefault(msg, 14, 0),
    destChainType: jspb.Message.getFieldWithDefault(msg, 15, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash;
  return proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceTxHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSrcTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcTxOrigin(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteAmount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteRecipient(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestChainId(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestMetadata(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestPacket(value);
      break;
    case 14:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setSrcChainType(value);
      break;
    case 15:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setDestChainType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSourceTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSrcTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSrcTxOrigin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRouteAmount();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRouteRecipient();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDestChainId();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRequestMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getRequestPacket_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      14,
      f
    );
  }
  f = message.getDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
};


/**
 * optional string src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 block_height = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string source_tx_hash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getSourceTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setSourceTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 src_timestamp = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getSrcTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setSrcTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string src_tx_origin = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getSrcTxOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setSrcTxOrigin = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string route_amount = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRouteAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setRouteAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string route_recipient = 9;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRouteRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setRouteRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string dest_chain_id = 10;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string request_sender = 11;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional bytes request_metadata = 12;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes request_metadata = 12;
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestMetadata()));
};


/**
 * optional bytes request_metadata = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setRequestMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes request_packet = 13;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestPacket = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes request_packet = 13;
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestPacket_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestPacket()));
};


/**
 * optional bytes request_packet = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getRequestPacket_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestPacket()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setRequestPacket = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType src_chain_type = 14;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 14, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType dest_chain_type = 15;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.getDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash} returns this
 */
proto.routerprotocol.routerchain.crosschain.CrosschainRequestClaimHash.prototype.setDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 15, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.crosschain);
