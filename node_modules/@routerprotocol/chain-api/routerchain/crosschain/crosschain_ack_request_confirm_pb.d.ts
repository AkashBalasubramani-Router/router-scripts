// package: routerprotocol.routerchain.crosschain
// file: routerchain/crosschain/crosschain_ack_request_confirm.proto

import * as jspb from "google-protobuf";

export class CrosschainAckRequestConfirm extends jspb.Message {
  getOrchestrator(): string;
  setOrchestrator(value: string): void;

  getAcksrcchainid(): string;
  setAcksrcchainid(value: string): void;

  getAckrequestidentifier(): number;
  setAckrequestidentifier(value: number): void;

  getClaimhash(): Uint8Array | string;
  getClaimhash_asU8(): Uint8Array;
  getClaimhash_asB64(): string;
  setClaimhash(value: Uint8Array | string): void;

  getEthsigner(): string;
  setEthsigner(value: string): void;

  getSignature(): string;
  setSignature(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): CrosschainAckRequestConfirm.AsObject;
  static toObject(includeInstance: boolean, msg: CrosschainAckRequestConfirm): CrosschainAckRequestConfirm.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: CrosschainAckRequestConfirm, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): CrosschainAckRequestConfirm;
  static deserializeBinaryFromReader(message: CrosschainAckRequestConfirm, reader: jspb.BinaryReader): CrosschainAckRequestConfirm;
}

export namespace CrosschainAckRequestConfirm {
  export type AsObject = {
    orchestrator: string,
    acksrcchainid: string,
    ackrequestidentifier: number,
    claimhash: Uint8Array | string,
    ethsigner: string,
    signature: string,
  }
}

