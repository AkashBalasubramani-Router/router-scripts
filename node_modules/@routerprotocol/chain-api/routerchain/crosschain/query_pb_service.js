// package: routerprotocol.routerchain.crosschain
// file: routerchain/crosschain/query.proto

var routerchain_crosschain_query_pb = require("../../routerchain/crosschain/query_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "routerprotocol.routerchain.crosschain.Query";
  return Query;
}());

Query.Params = {
  methodName: "Params",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryParamsRequest,
  responseType: routerchain_crosschain_query_pb.QueryParamsResponse
};

Query.CrosschainRequest = {
  methodName: "CrosschainRequest",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryGetCrosschainRequestRequest,
  responseType: routerchain_crosschain_query_pb.QueryGetCrosschainRequestResponse
};

Query.CrosschainRequestAll = {
  methodName: "CrosschainRequestAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryAllCrosschainRequestRequest,
  responseType: routerchain_crosschain_query_pb.QueryAllCrosschainRequestResponse
};

Query.CrosschainRequestConfirm = {
  methodName: "CrosschainRequestConfirm",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmRequest,
  responseType: routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmResponse
};

Query.CrosschainRequestConfirmAll = {
  methodName: "CrosschainRequestConfirmAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmRequest,
  responseType: routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmResponse
};

Query.CrosschainAckRequest = {
  methodName: "CrosschainAckRequest",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestRequest,
  responseType: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestResponse
};

Query.CrosschainAckRequestAll = {
  methodName: "CrosschainAckRequestAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestRequest,
  responseType: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestResponse
};

Query.CrosschainAckRequestConfirm = {
  methodName: "CrosschainAckRequestConfirm",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmRequest,
  responseType: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmResponse
};

Query.CrosschainAckRequestConfirmAll = {
  methodName: "CrosschainAckRequestConfirmAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmRequest,
  responseType: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmResponse
};

Query.CrosschainAckReceipt = {
  methodName: "CrosschainAckReceipt",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptRequest,
  responseType: routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptResponse
};

Query.CrosschainAckReceiptAll = {
  methodName: "CrosschainAckReceiptAll",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptRequest,
  responseType: routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.params = function params(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Params, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainRequest = function crosschainRequest(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainRequest, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainRequestAll = function crosschainRequestAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainRequestAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainRequestConfirm = function crosschainRequestConfirm(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainRequestConfirm, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainRequestConfirmAll = function crosschainRequestConfirmAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainRequestConfirmAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainAckRequest = function crosschainAckRequest(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainAckRequest, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainAckRequestAll = function crosschainAckRequestAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainAckRequestAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainAckRequestConfirm = function crosschainAckRequestConfirm(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainAckRequestConfirm, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainAckRequestConfirmAll = function crosschainAckRequestConfirmAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainAckRequestConfirmAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainAckReceipt = function crosschainAckReceipt(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainAckReceipt, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.crosschainAckReceiptAll = function crosschainAckReceiptAll(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CrosschainAckReceiptAll, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

