// source: routerchain/crosschain/tx.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var multichain_chain_type_pb = require('../../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.displayName = 'proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orchestrator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 3, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    sourceTxHash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    srcTimestamp: jspb.Message.getFieldWithDefault(msg, 7, 0),
    srcTxOrigin: jspb.Message.getFieldWithDefault(msg, 8, ""),
    routeAmount: jspb.Message.getFieldWithDefault(msg, 9, ""),
    routeRecipient: jspb.Message.getFieldWithDefault(msg, 10, ""),
    destChainId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    requestSender: jspb.Message.getFieldWithDefault(msg, 12, ""),
    requestMetadata: msg.getRequestMetadata_asB64(),
    requestPacket: msg.getRequestPacket_asB64(),
    srcChainType: jspb.Message.getFieldWithDefault(msg, 15, 0),
    destChainType: jspb.Message.getFieldWithDefault(msg, 16, 0),
    ethsigner: jspb.Message.getFieldWithDefault(msg, 17, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 18, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest;
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestrator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceTxHash(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSrcTimestamp(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcTxOrigin(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteAmount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteRecipient(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestChainId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestMetadata(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestPacket(value);
      break;
    case 15:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setSrcChainType(value);
      break;
    case 16:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setDestChainType(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthsigner(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrchestrator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getSourceTxHash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSrcTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSrcTxOrigin();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRouteAmount();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRouteRecipient();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDestChainId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getRequestMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getRequestPacket_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
  f = message.getEthsigner();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
};


/**
 * optional string orchestrator = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getOrchestrator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setOrchestrator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 request_identifier = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 block_height = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string source_tx_hash = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getSourceTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setSourceTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 src_timestamp = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getSrcTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setSrcTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string src_tx_origin = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getSrcTxOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setSrcTxOrigin = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string route_amount = 9;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRouteAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setRouteAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string route_recipient = 10;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRouteRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setRouteRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string dest_chain_id = 11;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string request_sender = 12;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes request_metadata = 13;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes request_metadata = 13;
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestMetadata()));
};


/**
 * optional bytes request_metadata = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setRequestMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes request_packet = 14;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestPacket = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes request_packet = 14;
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestPacket_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestPacket()));
};


/**
 * optional bytes request_packet = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getRequestPacket_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestPacket()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setRequestPacket = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType src_chain_type = 15;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 15, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType dest_chain_type = 16;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 16, value);
};


/**
 * optional string ethSigner = 17;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getEthsigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setEthsigner = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional string signature = 18;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse;
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 request_identifier = 1;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainRequestResponse.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orchestrator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourcechainid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    claimhash: msg.getClaimhash_asB64(),
    ethsigner: jspb.Message.getFieldWithDefault(msg, 5, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest;
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestrator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcechainid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimhash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthsigner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrchestrator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourcechainid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getClaimhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEthsigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string orchestrator = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getOrchestrator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.setOrchestrator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sourceChainId = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getSourcechainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.setSourcechainid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes claimHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getClaimhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes claimHash = 4;
 * This is a type-conversion wrapper around `getClaimhash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getClaimhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimhash()));
};


/**
 * optional bytes claimHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimhash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getClaimhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.setClaimhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string ethSigner = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getEthsigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.setEthsigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string signature = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse;
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orchestrator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 4, 0),
    blockheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    desttxhash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    relayerrouteraddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    ackDestChainId: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requestSender: jspb.Message.getFieldWithDefault(msg, 9, ""),
    requestidentifier: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ackSrcChainType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    ackDestChainType: jspb.Message.getFieldWithDefault(msg, 12, 0),
    feeconsumed: jspb.Message.getFieldWithDefault(msg, 13, 0),
    execdata: msg.getExecdata_asB64(),
    execstatus: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    ethsigner: jspb.Message.getFieldWithDefault(msg, 16, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest;
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestrator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockheight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesttxhash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerrouteraddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckDestChainId(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestidentifier(value);
      break;
    case 11:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckSrcChainType(value);
      break;
    case 12:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckDestChainType(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeeconsumed(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecdata(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecstatus(value);
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthsigner(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrchestrator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDesttxhash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRelayerrouteraddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getAckDestChainId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getAckSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getAckDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = message.getFeeconsumed();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getExecdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getExecstatus();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getEthsigner();
  if (f.length > 0) {
    writer.writeString(
      16,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string orchestrator = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getOrchestrator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setOrchestrator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ack_src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 ack_request_identifier = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 blockHeight = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string destTxHash = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getDesttxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setDesttxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string relayerRouterAddress = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getRelayerrouteraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setRelayerrouteraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string ack_dest_chain_id = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getAckDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setAckDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string request_sender = 9;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 requestIdentifier = 10;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getRequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setRequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_src_chain_type = 11;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getAckSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setAckSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_dest_chain_type = 12;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getAckDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setAckDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};


/**
 * optional uint64 feeConsumed = 13;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getFeeconsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setFeeconsumed = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional bytes execData = 14;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getExecdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes execData = 14;
 * This is a type-conversion wrapper around `getExecdata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getExecdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecdata()));
};


/**
 * optional bytes execData = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecdata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getExecdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setExecdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bool execStatus = 15;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getExecstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setExecstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional string ethSigner = 16;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getEthsigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setEthsigner = function(value) {
  return jspb.Message.setProto3StringField(this, 16, value);
};


/**
 * optional string signature = 17;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse;
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    orchestrator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackrequestidentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    claimhash: msg.getClaimhash_asB64(),
    ethsigner: jspb.Message.getFieldWithDefault(msg, 5, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest;
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestrator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckrequestidentifier(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimhash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthsigner(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrchestrator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckrequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getClaimhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getEthsigner();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string orchestrator = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getOrchestrator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.setOrchestrator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ack_src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ackRequestIdentifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getAckrequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.setAckrequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes claimHash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getClaimhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes claimHash = 4;
 * This is a type-conversion wrapper around `getClaimhash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getClaimhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimhash()));
};


/**
 * optional bytes claimHash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimhash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getClaimhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimhash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.setClaimhash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string ethSigner = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getEthsigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.setEthsigner = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string signature = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse;
  return proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgConfirmCrosschainAckRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    orchestrator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackreceiptsrcchainid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contract: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ackReceiptIdentifier: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ackReceiptBlockheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ackReceiptTxhash: jspb.Message.getFieldWithDefault(msg, 6, ""),
    relayerrouteraddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    requestidentifier: jspb.Message.getFieldWithDefault(msg, 8, 0),
    acksrcchainid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    ackrequestidentifier: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ackexecdata: msg.getAckexecdata_asB64(),
    ackexecstatus: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    feeconsumed: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt;
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestrator(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckreceiptsrcchainid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setContract(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptIdentifier(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptBlockheight(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckReceiptTxhash(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerrouteraddress(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestidentifier(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setAcksrcchainid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckrequestidentifier(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAckexecdata(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAckexecstatus(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFeeconsumed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrchestrator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckreceiptsrcchainid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContract();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAckReceiptIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAckReceiptBlockheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getAckReceiptTxhash();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRelayerrouteraddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getAcksrcchainid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAckrequestidentifier();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getAckexecdata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getAckexecstatus();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getFeeconsumed();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
};


/**
 * optional string orchestrator = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getOrchestrator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setOrchestrator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ackReceiptSrcChainId = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckreceiptsrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAckreceiptsrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string contract = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getContract = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setContract = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint64 ack_receipt_identifier = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckReceiptIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAckReceiptIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ack_receipt_blockHeight = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckReceiptBlockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAckReceiptBlockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string ack_receipt_txHash = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckReceiptTxhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAckReceiptTxhash = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string relayerRouterAddress = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getRelayerrouteraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setRelayerrouteraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 requestIdentifier = 8;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getRequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setRequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string ackSrcChainId = 9;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAcksrcchainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAcksrcchainid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional uint64 ackRequestIdentifier = 10;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckrequestidentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAckrequestidentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional bytes ackExecData = 11;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckexecdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes ackExecData = 11;
 * This is a type-conversion wrapper around `getAckexecdata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckexecdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAckexecdata()));
};


/**
 * optional bytes ackExecData = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAckexecdata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckexecdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAckexecdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAckexecdata = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bool ackExecStatus = 12;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getAckexecstatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setAckexecstatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional uint64 feeConsumed = 13;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.getFeeconsumed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt} returns this
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceipt.prototype.setFeeconsumed = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse;
  return proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.MsgCrosschainAckReceiptResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.routerprotocol.routerchain.crosschain);
