// source: routerchain/crosschain/events.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var multichain_chain_type_pb = require('../../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var cosmos_base_v1beta1_coin_pb = require('../../cosmos/base/v1beta1/coin_pb.js');
goog.object.extend(proto, cosmos_base_v1beta1_coin_pb);
var gogoproto_gogo_pb = require('../../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.displayName = 'proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.displayName = 'proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sourceTxHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    srcTimestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
    srcTxOrigin: jspb.Message.getFieldWithDefault(msg, 7, ""),
    routeAmount: jspb.Message.getFieldWithDefault(msg, 9, ""),
    routeRecipient: jspb.Message.getFieldWithDefault(msg, 10, ""),
    destChainId: jspb.Message.getFieldWithDefault(msg, 11, ""),
    requestSender: jspb.Message.getFieldWithDefault(msg, 12, ""),
    requestMetadata: msg.getRequestMetadata_asB64(),
    requestPacket: msg.getRequestPacket_asB64(),
    srcChainType: jspb.Message.getFieldWithDefault(msg, 15, 0),
    destChainType: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceTxHash(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSrcTimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcTxOrigin(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteAmount(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteRecipient(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestChainId(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestMetadata(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestPacket(value);
      break;
    case 15:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setSrcChainType(value);
      break;
    case 16:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setDestChainType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getSourceTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getSrcTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getSrcTxOrigin();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRouteAmount();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getRouteRecipient();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDestChainId();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getRequestMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getRequestPacket_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      15,
      f
    );
  }
  f = message.getDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      16,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 block_height = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string source_tx_hash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getSourceTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setSourceTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 src_timestamp = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getSrcTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setSrcTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string src_tx_origin = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getSrcTxOrigin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setSrcTxOrigin = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string route_amount = 9;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRouteAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setRouteAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string route_recipient = 10;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRouteRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setRouteRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string dest_chain_id = 11;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string request_sender = 12;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional bytes request_metadata = 13;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes request_metadata = 13;
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestMetadata()));
};


/**
 * optional bytes request_metadata = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestMetadata()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setRequestMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes request_packet = 14;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestPacket = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes request_packet = 14;
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestPacket_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestPacket()));
};


/**
 * optional bytes request_packet = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestPacket()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getRequestPacket_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestPacket()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setRequestPacket = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType src_chain_type = 15;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 15, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType dest_chain_type = 16;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.getDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCreated.prototype.setDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 16, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64(),
    ethSigner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orchestrator: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthSigner(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestrator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEthSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrchestrator();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string source_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getSourceChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.setSourceChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string eth_signer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getEthSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.setEthSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string signature = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string orchestrator = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.getOrchestrator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestConfirm.prototype.setOrchestrator = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    routeAmount: jspb.Message.getFieldWithDefault(msg, 3, ""),
    routeRecipient: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer;
  return proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteAmount(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRouteRecipient(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRouteAmount();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRouteRecipient();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string source_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.getSourceChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.setSourceChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string route_amount = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.getRouteAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.setRouteAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string route_recipient = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.getRouteRecipient = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventHandleNativeTransfer.prototype.setRouteRecipient = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64(),
    feePayer: jspb.Message.getFieldWithDefault(msg, 4, ""),
    destTxFeeInRoute: (f = msg.getDestTxFeeInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    destGasLimit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    destGasPrice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    relayerIncentiveInRoute: (f = msg.getRelayerIncentiveInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayer(value);
      break;
    case 5:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setDestTxFeeInRoute(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDestGasLimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDestGasPrice(value);
      break;
    case 8:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setRelayerIncentiveInRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFeePayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDestTxFeeInRoute();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getDestGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getDestGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getRelayerIncentiveInRoute();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getSourceChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setSourceChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string fee_payer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getFeePayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setFeePayer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional cosmos.base.v1beta1.Coin dest_tx_fee_in_route = 5;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getDestTxFeeInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 5));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setDestTxFeeInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.clearDestTxFeeInRoute = function() {
  return this.setDestTxFeeInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.hasDestTxFeeInRoute = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 dest_gas_limit = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getDestGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setDestGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 dest_gas_price = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getDestGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setDestGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional cosmos.base.v1beta1.Coin relayer_incentive_in_route = 8;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.getRelayerIncentiveInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 8));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.setRelayerIncentiveInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.clearRelayerIncentiveInRoute = function() {
  return this.setRelayerIncentiveInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReadyToExecute.prototype.hasRelayerIncentiveInRoute = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    execResponse: msg.getExecResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExecResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes exec_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getExecResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes exec_response = 4;
 * This is a type-conversion wrapper around `getExecResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getExecResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecResponse()));
};


/**
 * optional bytes exec_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.getExecResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecuted.prototype.setExecResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    srcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    execErrResponse: msg.getExecErrResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecErrResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getExecErrResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes exec_err_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getExecErrResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes exec_err_response = 4;
 * This is a type-conversion wrapper around `getExecErrResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getExecErrResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecErrResponse()));
};


/**
 * optional bytes exec_err_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecErrResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.getExecErrResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecErrResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainExecutionFailed.prototype.setExecErrResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64(),
    feePayer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFeePayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string fee_payer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.getFeePayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainFeePayerUpdated.prototype.setFeePayer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64(),
    feePayer: jspb.Message.getFieldWithDefault(msg, 4, ""),
    destGasLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    destGasPrice: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayer(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDestGasLimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDestGasPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFeePayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDestGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDestGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string fee_payer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getFeePayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.setFeePayer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 dest_gas_limit = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getDestGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.setDestGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 dest_gas_price = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.getDestGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainDestGasIncremented.prototype.setDestGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    relayerFeeInRoute: (f = msg.getRelayerFeeInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    refundFeeInRoute: (f = msg.getRefundFeeInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 3:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setRelayerFeeInRoute(value);
      break;
    case 4:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setRefundFeeInRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRelayerFeeInRoute();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getRefundFeeInRoute();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cosmos.base.v1beta1.Coin relayer_fee_in_route = 3;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.getRelayerFeeInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 3));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.setRelayerFeeInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.clearRelayerFeeInRoute = function() {
  return this.setRelayerFeeInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.hasRelayerFeeInRoute = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cosmos.base.v1beta1.Coin refund_fee_in_route = 4;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.getRefundFeeInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 4));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.setRefundFeeInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.clearRefundFeeInRoute = function() {
  return this.setRefundFeeInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestFeeSettlement.prototype.hasRefundFeeInRoute = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    srcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.getSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.setSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainRequestCompleted.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    destTxHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relayerRouterAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    ackDestChainId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    requestSender: jspb.Message.getFieldWithDefault(msg, 8, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 9, 0),
    ackSrcChainType: jspb.Message.getFieldWithDefault(msg, 10, 0),
    ackDestChainType: jspb.Message.getFieldWithDefault(msg, 11, 0),
    execData: msg.getExecData_asB64(),
    execStatus: jspb.Message.getBooleanFieldWithDefault(msg, 13, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBlockHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestTxHash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerRouterAddress(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckDestChainId(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestSender(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    case 10:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckSrcChainType(value);
      break;
    case 11:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setAckDestChainType(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExecData(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExecStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getDestTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelayerRouterAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getAckDestChainId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRequestSender();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getAckSrcChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getAckDestChainType();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getExecData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getExecStatus();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string ack_src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 block_height = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string dest_tx_hash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getDestTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setDestTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relayer_router_address = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getRelayerRouterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setRelayerRouterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string ack_dest_chain_id = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAckDestChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setAckDestChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string request_sender = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getRequestSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setRequestSender = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint64 request_identifier = 9;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_src_chain_type = 10;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAckSrcChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setAckSrcChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional routerprotocol.routerchain.multichain.ChainType ack_dest_chain_type = 11;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getAckDestChainType = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setAckDestChainType = function(value) {
  return jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional bytes exec_data = 12;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getExecData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes exec_data = 12;
 * This is a type-conversion wrapper around `getExecData()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getExecData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExecData()));
};


/**
 * optional bytes exec_data = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExecData()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getExecData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExecData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setExecData = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bool exec_status = 13;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.getExecStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestCreated.prototype.setExecStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64(),
    ethSigner: jspb.Message.getFieldWithDefault(msg, 4, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 5, ""),
    orchestrator: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEthSigner(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrchestrator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getEthSigner();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getOrchestrator();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string ack_src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 ack_request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string eth_signer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getEthSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.setEthSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string signature = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string orchestrator = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.getOrchestrator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckRequestConfirm.prototype.setOrchestrator = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64(),
    feePayer: jspb.Message.getFieldWithDefault(msg, 4, ""),
    txFeeInRoute: (f = msg.getTxFeeInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    ackGasLimit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ackGasPrice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    ackRelayerIncentiveInRoute: (f = msg.getAckRelayerIncentiveInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayer(value);
      break;
    case 5:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setTxFeeInRoute(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckGasLimit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckGasPrice(value);
      break;
    case 8:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setAckRelayerIncentiveInRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFeePayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTxFeeInRoute();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getAckGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getAckGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getAckRelayerIncentiveInRoute();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ack_src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 ack_request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string fee_payer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getFeePayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setFeePayer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional cosmos.base.v1beta1.Coin tx_fee_in_route = 5;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getTxFeeInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 5));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setTxFeeInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.clearTxFeeInRoute = function() {
  return this.setTxFeeInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.hasTxFeeInRoute = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 ack_gas_limit = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getAckGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setAckGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 ack_gas_price = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getAckGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setAckGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional cosmos.base.v1beta1.Coin ack_relayer_incentive_in_route = 8;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.getAckRelayerIncentiveInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 8));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.setAckRelayerIncentiveInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.clearAckRelayerIncentiveInRoute = function() {
  return this.setAckRelayerIncentiveInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReadyToExecute.prototype.hasAckRelayerIncentiveInRoute = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ackExecResponse: msg.getAckExecResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAckExecResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAckExecResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string ack_src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes ack_exec_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAckExecResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ack_exec_response = 4;
 * This is a type-conversion wrapper around `getAckExecResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAckExecResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAckExecResponse()));
};


/**
 * optional bytes ack_exec_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAckExecResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.getAckExecResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAckExecResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecuted.prototype.setAckExecResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ackExecErrResponse: msg.getAckExecErrResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAckExecErrResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAckExecErrResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string ack_src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_request_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes ack_exec_err_response = 4;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAckExecErrResponse = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ack_exec_err_response = 4;
 * This is a type-conversion wrapper around `getAckExecErrResponse()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAckExecErrResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAckExecErrResponse()));
};


/**
 * optional bytes ack_exec_err_response = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAckExecErrResponse()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.getAckExecErrResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAckExecErrResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckExecutionFailed.prototype.setAckExecErrResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    relayerFeeInRoute: (f = msg.getRelayerFeeInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f),
    refundFeeInRoute: (f = msg.getRefundFeeInRoute()) && cosmos_base_v1beta1_coin_pb.Coin.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 3:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setRelayerFeeInRoute(value);
      break;
    case 4:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.setRefundFeeInRoute(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRelayerFeeInRoute();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
  f = message.getRefundFeeInRoute();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ack_src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 ack_request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional cosmos.base.v1beta1.Coin relayer_fee_in_route = 3;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.getRelayerFeeInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 3));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.setRelayerFeeInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.clearRelayerFeeInRoute = function() {
  return this.setRelayerFeeInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.hasRelayerFeeInRoute = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional cosmos.base.v1beta1.Coin refund_fee_in_route = 4;
 * @return {?proto.cosmos.base.v1beta1.Coin}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.getRefundFeeInRoute = function() {
  return /** @type{?proto.cosmos.base.v1beta1.Coin} */ (
    jspb.Message.getWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 4));
};


/**
 * @param {?proto.cosmos.base.v1beta1.Coin|undefined} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} returns this
*/
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.setRefundFeeInRoute = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.clearRefundFeeInRoute = function() {
  return this.setRefundFeeInRoute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckFeeSettlement.prototype.hasRefundFeeInRoute = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackSrcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string ack_src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.getAckSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.setAckSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 ack_request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckCompleted.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackSrcChainType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackRequestIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64(),
    feePayer: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ackGasLimit: jspb.Message.getFieldWithDefault(msg, 5, 0),
    ackGasPrice: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckSrcChainType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckRequestIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayer(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckGasLimit(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckGasPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckSrcChainType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getFeePayer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAckGasLimit();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getAckGasPrice();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string ack_src_chain_type = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getAckSrcChainType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.setAckSrcChainType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 ack_request_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getAckRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.setAckRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string fee_payer = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getFeePayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.setFeePayer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 ack_gas_limit = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getAckGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.setAckGasLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 ack_gas_price = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.getAckGasPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckGasIncremented.prototype.setAckGasPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.toObject = function(includeInstance, msg) {
  var f, obj = {
    attestationId: msg.getAttestationId_asB64(),
    ackReceiptSrcChainId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ackReceiptIdentifier: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ackReceiptBlockHeight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ackReceiptTxHash: jspb.Message.getFieldWithDefault(msg, 5, ""),
    relayerRouterAddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    requestIdentifier: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttestationId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckReceiptSrcChainId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptBlockHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckReceiptTxHash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRelayerRouterAddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRequestIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttestationId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAckReceiptSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAckReceiptIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAckReceiptBlockHeight();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAckReceiptTxHash();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelayerRouterAddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRequestIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional bytes attestation_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getAttestationId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes attestation_id = 1;
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getAttestationId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttestationId()));
};


/**
 * optional bytes attestation_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttestationId()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getAttestationId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttestationId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.setAttestationId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string ack_receipt_src_chain_id = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getAckReceiptSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.setAckReceiptSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 ack_receipt_identifier = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getAckReceiptIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.setAckReceiptIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 ack_receipt_block_height = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getAckReceiptBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.setAckReceiptBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string ack_receipt_tx_hash = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getAckReceiptTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.setAckReceiptTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string relayer_router_address = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getRelayerRouterAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.setRelayerRouterAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 request_identifier = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.getRequestIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainAckReceiptCreated.prototype.setRequestIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ackReceiptSrcChainId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ackReceiptIdentifier: jspb.Message.getFieldWithDefault(msg, 2, 0),
    claimHash: msg.getClaimHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted;
  return proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAckReceiptSrcChainId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAckReceiptIdentifier(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClaimHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAckReceiptSrcChainId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAckReceiptIdentifier();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getClaimHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string ack_receipt_src_chain_id = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.getAckReceiptSrcChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.setAckReceiptSrcChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 ack_receipt_identifier = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.getAckReceiptIdentifier = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.setAckReceiptIdentifier = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes claim_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.getClaimHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes claim_hash = 3;
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {string}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.getClaimHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClaimHash()));
};


/**
 * optional bytes claim_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClaimHash()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.getClaimHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClaimHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted} returns this
 */
proto.routerprotocol.routerchain.crosschain.EventCrosschainReceiptCompleted.prototype.setClaimHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.crosschain);
