// package: routerprotocol.routerchain.crosschain
// file: routerchain/crosschain/query.proto

import * as routerchain_crosschain_query_pb from "../../routerchain/crosschain/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryParams = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryParamsRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryParamsResponse;
};

type QueryCrosschainRequest = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainRequestRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainRequestResponse;
};

type QueryCrosschainRequestAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainRequestRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainRequestResponse;
};

type QueryCrosschainRequestConfirm = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmResponse;
};

type QueryCrosschainRequestConfirmAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmResponse;
};

type QueryCrosschainAckRequest = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestResponse;
};

type QueryCrosschainAckRequestAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestResponse;
};

type QueryCrosschainAckRequestConfirm = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmResponse;
};

type QueryCrosschainAckRequestConfirmAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmResponse;
};

type QueryCrosschainAckReceipt = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptResponse;
};

type QueryCrosschainAckReceiptAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptRequest;
  readonly responseType: typeof routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly Params: QueryParams;
  static readonly CrosschainRequest: QueryCrosschainRequest;
  static readonly CrosschainRequestAll: QueryCrosschainRequestAll;
  static readonly CrosschainRequestConfirm: QueryCrosschainRequestConfirm;
  static readonly CrosschainRequestConfirmAll: QueryCrosschainRequestConfirmAll;
  static readonly CrosschainAckRequest: QueryCrosschainAckRequest;
  static readonly CrosschainAckRequestAll: QueryCrosschainAckRequestAll;
  static readonly CrosschainAckRequestConfirm: QueryCrosschainAckRequestConfirm;
  static readonly CrosschainAckRequestConfirmAll: QueryCrosschainAckRequestConfirmAll;
  static readonly CrosschainAckReceipt: QueryCrosschainAckReceipt;
  static readonly CrosschainAckReceiptAll: QueryCrosschainAckReceiptAll;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  params(
    requestMessage: routerchain_crosschain_query_pb.QueryParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  params(
    requestMessage: routerchain_crosschain_query_pb.QueryParamsRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  crosschainRequest(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  crosschainRequest(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  crosschainRequestAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  crosschainRequestAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  crosschainRequestConfirm(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainRequestConfirm(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainRequestConfirmAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainRequestConfirmAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequest(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequest(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequestAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequestAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequestConfirm(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequestConfirm(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequestConfirmAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequestConfirmAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckRequestConfirmResponse|null) => void
  ): UnaryResponse;
  crosschainAckReceipt(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptResponse|null) => void
  ): UnaryResponse;
  crosschainAckReceipt(
    requestMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryGetCrosschainAckReceiptResponse|null) => void
  ): UnaryResponse;
  crosschainAckReceiptAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptResponse|null) => void
  ): UnaryResponse;
  crosschainAckReceiptAll(
    requestMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_query_pb.QueryAllCrosschainAckReceiptResponse|null) => void
  ): UnaryResponse;
}

