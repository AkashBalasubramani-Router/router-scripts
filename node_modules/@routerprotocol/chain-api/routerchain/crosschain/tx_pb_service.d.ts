// package: routerprotocol.routerchain.crosschain
// file: routerchain/crosschain/tx.proto

import * as routerchain_crosschain_tx_pb from "../../routerchain/crosschain/tx_pb";
import {grpc} from "@improbable-eng/grpc-web";

type MsgCrosschainRequest = {
  readonly methodName: string;
  readonly service: typeof Msg;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_tx_pb.MsgCrosschainRequest;
  readonly responseType: typeof routerchain_crosschain_tx_pb.MsgCrosschainRequestResponse;
};

type MsgConfirmCrosschainRequest = {
  readonly methodName: string;
  readonly service: typeof Msg;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_tx_pb.MsgConfirmCrosschainRequest;
  readonly responseType: typeof routerchain_crosschain_tx_pb.MsgConfirmCrosschainRequestResponse;
};

type MsgCrosschainAckRequest = {
  readonly methodName: string;
  readonly service: typeof Msg;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_tx_pb.MsgCrosschainAckRequest;
  readonly responseType: typeof routerchain_crosschain_tx_pb.MsgCrosschainAckRequestResponse;
};

type MsgConfirmCrosschainAckRequest = {
  readonly methodName: string;
  readonly service: typeof Msg;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_tx_pb.MsgConfirmCrosschainAckRequest;
  readonly responseType: typeof routerchain_crosschain_tx_pb.MsgConfirmCrosschainAckRequestResponse;
};

type MsgCrosschainAckReceipt = {
  readonly methodName: string;
  readonly service: typeof Msg;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof routerchain_crosschain_tx_pb.MsgCrosschainAckReceipt;
  readonly responseType: typeof routerchain_crosschain_tx_pb.MsgCrosschainAckReceiptResponse;
};

export class Msg {
  static readonly serviceName: string;
  static readonly CrosschainRequest: MsgCrosschainRequest;
  static readonly ConfirmCrosschainRequest: MsgConfirmCrosschainRequest;
  static readonly CrosschainAckRequest: MsgCrosschainAckRequest;
  static readonly ConfirmCrosschainAckRequest: MsgConfirmCrosschainAckRequest;
  static readonly CrosschainAckReceipt: MsgCrosschainAckReceipt;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class MsgClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  crosschainRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgCrosschainRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  crosschainRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgCrosschainRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  confirmCrosschainRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  confirmCrosschainRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainRequestResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  crosschainAckRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  confirmCrosschainAckRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainAckRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  confirmCrosschainAckRequest(
    requestMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainAckRequest,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgConfirmCrosschainAckRequestResponse|null) => void
  ): UnaryResponse;
  crosschainAckReceipt(
    requestMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckReceipt,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckReceiptResponse|null) => void
  ): UnaryResponse;
  crosschainAckReceipt(
    requestMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckReceipt,
    callback: (error: ServiceError|null, responseMessage: routerchain_crosschain_tx_pb.MsgCrosschainAckReceiptResponse|null) => void
  ): UnaryResponse;
}

