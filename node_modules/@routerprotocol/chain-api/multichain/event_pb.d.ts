// package: routerprotocol.routerchain.multichain
// file: multichain/event.proto

import * as jspb from "google-protobuf";
import * as multichain_chain_type_pb from "../multichain/chain_type_pb";
import * as multichain_chain_config_pb from "../multichain/chain_config_pb";

export class EventCreateChainConfig extends jspb.Message {
  getChainid(): string;
  setChainid(value: string): void;

  getChainname(): string;
  setChainname(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getNativeDecimals(): number;
  setNativeDecimals(value: number): void;

  getChaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setChaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getConfirmationsrequired(): number;
  setConfirmationsrequired(value: number): void;

  getLastobservedvalsetnonce(): number;
  setLastobservedvalsetnonce(value: number): void;

  getChainEnabled(): boolean;
  setChainEnabled(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventCreateChainConfig.AsObject;
  static toObject(includeInstance: boolean, msg: EventCreateChainConfig): EventCreateChainConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventCreateChainConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventCreateChainConfig;
  static deserializeBinaryFromReader(message: EventCreateChainConfig, reader: jspb.BinaryReader): EventCreateChainConfig;
}

export namespace EventCreateChainConfig {
  export type AsObject = {
    chainid: string,
    chainname: string,
    symbol: string,
    nativeDecimals: number,
    chaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    confirmationsrequired: number,
    lastobservedvalsetnonce: number,
    chainEnabled: boolean,
  }
}

export class EventUpdatedChainConfig extends jspb.Message {
  getChainid(): string;
  setChainid(value: string): void;

  getChainname(): string;
  setChainname(value: string): void;

  getSymbol(): string;
  setSymbol(value: string): void;

  getNativeDecimals(): number;
  setNativeDecimals(value: number): void;

  getChaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setChaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  getConfirmationsrequired(): number;
  setConfirmationsrequired(value: number): void;

  getLastobservedvalsetnonce(): number;
  setLastobservedvalsetnonce(value: number): void;

  getChainEnabled(): boolean;
  setChainEnabled(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventUpdatedChainConfig.AsObject;
  static toObject(includeInstance: boolean, msg: EventUpdatedChainConfig): EventUpdatedChainConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventUpdatedChainConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventUpdatedChainConfig;
  static deserializeBinaryFromReader(message: EventUpdatedChainConfig, reader: jspb.BinaryReader): EventUpdatedChainConfig;
}

export namespace EventUpdatedChainConfig {
  export type AsObject = {
    chainid: string,
    chainname: string,
    symbol: string,
    nativeDecimals: number,
    chaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
    confirmationsrequired: number,
    lastobservedvalsetnonce: number,
    chainEnabled: boolean,
  }
}

export class EventDeletedChainConfig extends jspb.Message {
  getChainid(): string;
  setChainid(value: string): void;

  getChaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setChaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventDeletedChainConfig.AsObject;
  static toObject(includeInstance: boolean, msg: EventDeletedChainConfig): EventDeletedChainConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventDeletedChainConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventDeletedChainConfig;
  static deserializeBinaryFromReader(message: EventDeletedChainConfig, reader: jspb.BinaryReader): EventDeletedChainConfig;
}

export namespace EventDeletedChainConfig {
  export type AsObject = {
    chainid: string,
    chaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
  }
}

export class EventCreateContractConfig extends jspb.Message {
  getChainid(): string;
  setChainid(value: string): void;

  getContractaddress(): string;
  setContractaddress(value: string): void;

  getContractheight(): number;
  setContractheight(value: number): void;

  getLastobservedeventnonce(): number;
  setLastobservedeventnonce(value: number): void;

  getLastobservedeventblockheight(): number;
  setLastobservedeventblockheight(value: number): void;

  getContracttype(): multichain_chain_config_pb.ContractTypeMap[keyof multichain_chain_config_pb.ContractTypeMap];
  setContracttype(value: multichain_chain_config_pb.ContractTypeMap[keyof multichain_chain_config_pb.ContractTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventCreateContractConfig.AsObject;
  static toObject(includeInstance: boolean, msg: EventCreateContractConfig): EventCreateContractConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventCreateContractConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventCreateContractConfig;
  static deserializeBinaryFromReader(message: EventCreateContractConfig, reader: jspb.BinaryReader): EventCreateContractConfig;
}

export namespace EventCreateContractConfig {
  export type AsObject = {
    chainid: string,
    contractaddress: string,
    contractheight: number,
    lastobservedeventnonce: number,
    lastobservedeventblockheight: number,
    contracttype: multichain_chain_config_pb.ContractTypeMap[keyof multichain_chain_config_pb.ContractTypeMap],
  }
}

export class EventUpdatedContractConfig extends jspb.Message {
  getChainid(): string;
  setChainid(value: string): void;

  getContractaddress(): string;
  setContractaddress(value: string): void;

  getContractheight(): number;
  setContractheight(value: number): void;

  getLastobservedeventnonce(): number;
  setLastobservedeventnonce(value: number): void;

  getLastobservedeventblockheight(): number;
  setLastobservedeventblockheight(value: number): void;

  getContracttype(): multichain_chain_config_pb.ContractTypeMap[keyof multichain_chain_config_pb.ContractTypeMap];
  setContracttype(value: multichain_chain_config_pb.ContractTypeMap[keyof multichain_chain_config_pb.ContractTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventUpdatedContractConfig.AsObject;
  static toObject(includeInstance: boolean, msg: EventUpdatedContractConfig): EventUpdatedContractConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventUpdatedContractConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventUpdatedContractConfig;
  static deserializeBinaryFromReader(message: EventUpdatedContractConfig, reader: jspb.BinaryReader): EventUpdatedContractConfig;
}

export namespace EventUpdatedContractConfig {
  export type AsObject = {
    chainid: string,
    contractaddress: string,
    contractheight: number,
    lastobservedeventnonce: number,
    lastobservedeventblockheight: number,
    contracttype: multichain_chain_config_pb.ContractTypeMap[keyof multichain_chain_config_pb.ContractTypeMap],
  }
}

export class EventDeletedContractConfig extends jspb.Message {
  getChainid(): string;
  setChainid(value: string): void;

  getContractaddress(): string;
  setContractaddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventDeletedContractConfig.AsObject;
  static toObject(includeInstance: boolean, msg: EventDeletedContractConfig): EventDeletedContractConfig.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventDeletedContractConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventDeletedContractConfig;
  static deserializeBinaryFromReader(message: EventDeletedContractConfig, reader: jspb.BinaryReader): EventDeletedContractConfig;
}

export namespace EventDeletedContractConfig {
  export type AsObject = {
    chainid: string,
    contractaddress: string,
  }
}

