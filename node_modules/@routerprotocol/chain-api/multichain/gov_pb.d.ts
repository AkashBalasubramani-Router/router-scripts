// package: routerprotocol.routerchain.multichain
// file: multichain/gov.proto

import * as jspb from "google-protobuf";
import * as multichain_chain_config_pb from "../multichain/chain_config_pb";
import * as multichain_chain_type_pb from "../multichain/chain_type_pb";

export class MultichainCreateChainConfigProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  hasChainconfig(): boolean;
  clearChainconfig(): void;
  getChainconfig(): multichain_chain_config_pb.ChainConfig | undefined;
  setChainconfig(value?: multichain_chain_config_pb.ChainConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MultichainCreateChainConfigProposal.AsObject;
  static toObject(includeInstance: boolean, msg: MultichainCreateChainConfigProposal): MultichainCreateChainConfigProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MultichainCreateChainConfigProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MultichainCreateChainConfigProposal;
  static deserializeBinaryFromReader(message: MultichainCreateChainConfigProposal, reader: jspb.BinaryReader): MultichainCreateChainConfigProposal;
}

export namespace MultichainCreateChainConfigProposal {
  export type AsObject = {
    title: string,
    description: string,
    chainconfig?: multichain_chain_config_pb.ChainConfig.AsObject,
  }
}

export class MultichainUpdateChainConfigProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  hasChainconfig(): boolean;
  clearChainconfig(): void;
  getChainconfig(): multichain_chain_config_pb.ChainConfig | undefined;
  setChainconfig(value?: multichain_chain_config_pb.ChainConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MultichainUpdateChainConfigProposal.AsObject;
  static toObject(includeInstance: boolean, msg: MultichainUpdateChainConfigProposal): MultichainUpdateChainConfigProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MultichainUpdateChainConfigProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MultichainUpdateChainConfigProposal;
  static deserializeBinaryFromReader(message: MultichainUpdateChainConfigProposal, reader: jspb.BinaryReader): MultichainUpdateChainConfigProposal;
}

export namespace MultichainUpdateChainConfigProposal {
  export type AsObject = {
    title: string,
    description: string,
    chainconfig?: multichain_chain_config_pb.ChainConfig.AsObject,
  }
}

export class MultichainDeleteChainConfigProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  getChainid(): string;
  setChainid(value: string): void;

  getChaintype(): multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap];
  setChaintype(value: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap]): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MultichainDeleteChainConfigProposal.AsObject;
  static toObject(includeInstance: boolean, msg: MultichainDeleteChainConfigProposal): MultichainDeleteChainConfigProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MultichainDeleteChainConfigProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MultichainDeleteChainConfigProposal;
  static deserializeBinaryFromReader(message: MultichainDeleteChainConfigProposal, reader: jspb.BinaryReader): MultichainDeleteChainConfigProposal;
}

export namespace MultichainDeleteChainConfigProposal {
  export type AsObject = {
    title: string,
    description: string,
    chainid: string,
    chaintype: multichain_chain_type_pb.ChainTypeMap[keyof multichain_chain_type_pb.ChainTypeMap],
  }
}

export class MultichainCreateContractConfigProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  hasContractconfig(): boolean;
  clearContractconfig(): void;
  getContractconfig(): multichain_chain_config_pb.ContractConfig | undefined;
  setContractconfig(value?: multichain_chain_config_pb.ContractConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MultichainCreateContractConfigProposal.AsObject;
  static toObject(includeInstance: boolean, msg: MultichainCreateContractConfigProposal): MultichainCreateContractConfigProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MultichainCreateContractConfigProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MultichainCreateContractConfigProposal;
  static deserializeBinaryFromReader(message: MultichainCreateContractConfigProposal, reader: jspb.BinaryReader): MultichainCreateContractConfigProposal;
}

export namespace MultichainCreateContractConfigProposal {
  export type AsObject = {
    title: string,
    description: string,
    contractconfig?: multichain_chain_config_pb.ContractConfig.AsObject,
  }
}

export class MultichainUpdateContractConfigProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  hasContractconfig(): boolean;
  clearContractconfig(): void;
  getContractconfig(): multichain_chain_config_pb.ContractConfig | undefined;
  setContractconfig(value?: multichain_chain_config_pb.ContractConfig): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MultichainUpdateContractConfigProposal.AsObject;
  static toObject(includeInstance: boolean, msg: MultichainUpdateContractConfigProposal): MultichainUpdateContractConfigProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MultichainUpdateContractConfigProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MultichainUpdateContractConfigProposal;
  static deserializeBinaryFromReader(message: MultichainUpdateContractConfigProposal, reader: jspb.BinaryReader): MultichainUpdateContractConfigProposal;
}

export namespace MultichainUpdateContractConfigProposal {
  export type AsObject = {
    title: string,
    description: string,
    contractconfig?: multichain_chain_config_pb.ContractConfig.AsObject,
  }
}

export class MultichainDeleteContractConfigProposal extends jspb.Message {
  getTitle(): string;
  setTitle(value: string): void;

  getDescription(): string;
  setDescription(value: string): void;

  getChainid(): string;
  setChainid(value: string): void;

  getContractaddress(): string;
  setContractaddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): MultichainDeleteContractConfigProposal.AsObject;
  static toObject(includeInstance: boolean, msg: MultichainDeleteContractConfigProposal): MultichainDeleteContractConfigProposal.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: MultichainDeleteContractConfigProposal, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): MultichainDeleteContractConfigProposal;
  static deserializeBinaryFromReader(message: MultichainDeleteContractConfigProposal, reader: jspb.BinaryReader): MultichainDeleteContractConfigProposal;
}

export namespace MultichainDeleteContractConfigProposal {
  export type AsObject = {
    title: string,
    description: string,
    chainid: string,
    contractaddress: string,
  }
}

