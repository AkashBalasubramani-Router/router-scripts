// source: multichain/event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var multichain_chain_type_pb = require('../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
var multichain_chain_config_pb = require('../multichain/chain_config_pb.js');
goog.object.extend(proto, multichain_chain_config_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.EventCreateChainConfig', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.EventCreateContractConfig', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.EventCreateChainConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.displayName = 'proto.routerprotocol.routerchain.multichain.EventCreateChainConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.displayName = 'proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.displayName = 'proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.EventCreateContractConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.displayName = 'proto.routerprotocol.routerchain.multichain.EventCreateContractConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.displayName = 'proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.displayName = 'proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chainname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nativeDecimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    chaintype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    confirmationsrequired: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastobservedvalsetnonce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    chainEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.EventCreateChainConfig;
  return proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNativeDecimals(value);
      break;
    case 5:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmationsrequired(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastobservedvalsetnonce(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChainEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChainname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNativeDecimals();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getConfirmationsrequired();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLastobservedvalsetnonce();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getChainEnabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string chainName = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getChainname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setChainname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 native_decimals = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getNativeDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setNativeDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ChainType chainType = 5;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint64 confirmationsRequired = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getConfirmationsrequired = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setConfirmationsrequired = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 lastObservedValsetNonce = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getLastobservedvalsetnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setLastobservedvalsetnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool chain_enabled = 8;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.getChainEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateChainConfig.prototype.setChainEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chainname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    nativeDecimals: jspb.Message.getFieldWithDefault(msg, 4, 0),
    chaintype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    confirmationsrequired: jspb.Message.getFieldWithDefault(msg, 6, 0),
    lastobservedvalsetnonce: jspb.Message.getFieldWithDefault(msg, 7, 0),
    chainEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig;
  return proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNativeDecimals(value);
      break;
    case 5:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setConfirmationsrequired(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastobservedvalsetnonce(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setChainEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChainname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNativeDecimals();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getConfirmationsrequired();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getLastobservedvalsetnonce();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getChainEnabled();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string chainName = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getChainname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setChainname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 native_decimals = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getNativeDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setNativeDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ChainType chainType = 5;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint64 confirmationsRequired = 6;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getConfirmationsrequired = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setConfirmationsrequired = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 lastObservedValsetNonce = 7;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getLastobservedvalsetnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setLastobservedvalsetnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool chain_enabled = 8;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.getChainEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedChainConfig.prototype.setChainEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chaintype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig;
  return proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ChainType chainType = 2;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventDeletedChainConfig.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lastobservedeventnonce: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastobservedeventblockheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    contracttype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.EventCreateContractConfig;
  return proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractheight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastobservedeventnonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastobservedeventblockheight(value);
      break;
    case 6:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ContractType} */ (reader.readEnum());
      msg.setContracttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractheight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLastobservedeventnonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLastobservedeventblockheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getContracttype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contractAddress = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 contractHeight = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.getContractheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.setContractheight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 lastObservedEventNonce = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.getLastobservedeventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.setLastobservedeventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 lastObservedEventBlockHeight = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.getLastobservedeventblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.setLastobservedeventblockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ContractType ContractType = 6;
 * @return {!proto.routerprotocol.routerchain.multichain.ContractType}
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.getContracttype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ContractType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ContractType} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventCreateContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventCreateContractConfig.prototype.setContracttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    lastobservedeventnonce: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastobservedeventblockheight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    contracttype: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig;
  return proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setContractheight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastobservedeventnonce(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastobservedeventblockheight(value);
      break;
    case 6:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ContractType} */ (reader.readEnum());
      msg.setContracttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractheight();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getLastobservedeventnonce();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLastobservedeventblockheight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getContracttype();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contractAddress = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 contractHeight = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.getContractheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.setContractheight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 lastObservedEventNonce = 4;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.getLastobservedeventnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.setLastobservedeventnonce = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 lastObservedEventBlockHeight = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.getLastobservedeventblockheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.setLastobservedeventblockheight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional ContractType ContractType = 6;
 * @return {!proto.routerprotocol.routerchain.multichain.ContractType}
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.getContracttype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ContractType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ContractType} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventUpdatedContractConfig.prototype.setContracttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig;
  return proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string chainId = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contractAddress = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig} returns this
 */
proto.routerprotocol.routerchain.multichain.EventDeletedContractConfig.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.multichain);
