// package: routerprotocol.routerchain.multichain
// file: multichain/query.proto

import * as multichain_query_pb from "../multichain/query_pb";
import {grpc} from "@improbable-eng/grpc-web";

type QueryParams = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof multichain_query_pb.QueryParamsRequest;
  readonly responseType: typeof multichain_query_pb.QueryParamsResponse;
};

type QueryChainConfig = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof multichain_query_pb.QueryGetChainConfigRequest;
  readonly responseType: typeof multichain_query_pb.QueryGetChainConfigResponse;
};

type QueryChainConfigAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof multichain_query_pb.QueryAllChainConfigRequest;
  readonly responseType: typeof multichain_query_pb.QueryAllChainConfigResponse;
};

type QueryContractConfig = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof multichain_query_pb.QueryGetContractConfigRequest;
  readonly responseType: typeof multichain_query_pb.QueryGetContractConfigResponse;
};

type QueryContractConfigByChainId = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof multichain_query_pb.QueryAllContractConfigByChainIdRequest;
  readonly responseType: typeof multichain_query_pb.QueryAllContractConfigByChainIdResponse;
};

type QueryContractConfigAll = {
  readonly methodName: string;
  readonly service: typeof Query;
  readonly requestStream: false;
  readonly responseStream: false;
  readonly requestType: typeof multichain_query_pb.QueryAllContractConfigRequest;
  readonly responseType: typeof multichain_query_pb.QueryAllContractConfigResponse;
};

export class Query {
  static readonly serviceName: string;
  static readonly Params: QueryParams;
  static readonly ChainConfig: QueryChainConfig;
  static readonly ChainConfigAll: QueryChainConfigAll;
  static readonly ContractConfig: QueryContractConfig;
  static readonly ContractConfigByChainId: QueryContractConfigByChainId;
  static readonly ContractConfigAll: QueryContractConfigAll;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class QueryClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  params(
    requestMessage: multichain_query_pb.QueryParamsRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  params(
    requestMessage: multichain_query_pb.QueryParamsRequest,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryParamsResponse|null) => void
  ): UnaryResponse;
  chainConfig(
    requestMessage: multichain_query_pb.QueryGetChainConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryGetChainConfigResponse|null) => void
  ): UnaryResponse;
  chainConfig(
    requestMessage: multichain_query_pb.QueryGetChainConfigRequest,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryGetChainConfigResponse|null) => void
  ): UnaryResponse;
  chainConfigAll(
    requestMessage: multichain_query_pb.QueryAllChainConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryAllChainConfigResponse|null) => void
  ): UnaryResponse;
  chainConfigAll(
    requestMessage: multichain_query_pb.QueryAllChainConfigRequest,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryAllChainConfigResponse|null) => void
  ): UnaryResponse;
  contractConfig(
    requestMessage: multichain_query_pb.QueryGetContractConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryGetContractConfigResponse|null) => void
  ): UnaryResponse;
  contractConfig(
    requestMessage: multichain_query_pb.QueryGetContractConfigRequest,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryGetContractConfigResponse|null) => void
  ): UnaryResponse;
  contractConfigByChainId(
    requestMessage: multichain_query_pb.QueryAllContractConfigByChainIdRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryAllContractConfigByChainIdResponse|null) => void
  ): UnaryResponse;
  contractConfigByChainId(
    requestMessage: multichain_query_pb.QueryAllContractConfigByChainIdRequest,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryAllContractConfigByChainIdResponse|null) => void
  ): UnaryResponse;
  contractConfigAll(
    requestMessage: multichain_query_pb.QueryAllContractConfigRequest,
    metadata: grpc.Metadata,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryAllContractConfigResponse|null) => void
  ): UnaryResponse;
  contractConfigAll(
    requestMessage: multichain_query_pb.QueryAllContractConfigRequest,
    callback: (error: ServiceError|null, responseMessage: multichain_query_pb.QueryAllContractConfigResponse|null) => void
  ): UnaryResponse;
}

