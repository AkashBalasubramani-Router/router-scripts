// source: multichain/gov.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var multichain_chain_config_pb = require('../multichain/chain_config_pb.js');
goog.object.extend(proto, multichain_chain_config_pb);
var multichain_chain_type_pb = require('../multichain/chain_type_pb.js');
goog.object.extend(proto, multichain_chain_type_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.displayName = 'proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.displayName = 'proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.displayName = 'proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.displayName = 'proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.displayName = 'proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.displayName = 'proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainconfig: (f = msg.getChainconfig()) && multichain_chain_config_pb.ChainConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal;
  return proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new multichain_chain_config_pb.ChainConfig;
      reader.readMessage(value,multichain_chain_config_pb.ChainConfig.deserializeBinaryFromReader);
      msg.setChainconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      multichain_chain_config_pb.ChainConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ChainConfig chainConfig = 3;
 * @return {?proto.routerprotocol.routerchain.multichain.ChainConfig}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.getChainconfig = function() {
  return /** @type{?proto.routerprotocol.routerchain.multichain.ChainConfig} */ (
    jspb.Message.getWrapperField(this, multichain_chain_config_pb.ChainConfig, 3));
};


/**
 * @param {?proto.routerprotocol.routerchain.multichain.ChainConfig|undefined} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal} returns this
*/
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.setChainconfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.clearChainconfig = function() {
  return this.setChainconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateChainConfigProposal.prototype.hasChainconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainconfig: (f = msg.getChainconfig()) && multichain_chain_config_pb.ChainConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal;
  return proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new multichain_chain_config_pb.ChainConfig;
      reader.readMessage(value,multichain_chain_config_pb.ChainConfig.deserializeBinaryFromReader);
      msg.setChainconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      multichain_chain_config_pb.ChainConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ChainConfig chainConfig = 3;
 * @return {?proto.routerprotocol.routerchain.multichain.ChainConfig}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.getChainconfig = function() {
  return /** @type{?proto.routerprotocol.routerchain.multichain.ChainConfig} */ (
    jspb.Message.getWrapperField(this, multichain_chain_config_pb.ChainConfig, 3));
};


/**
 * @param {?proto.routerprotocol.routerchain.multichain.ChainConfig|undefined} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal} returns this
*/
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.setChainconfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.clearChainconfig = function() {
  return this.setChainconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateChainConfigProposal.prototype.hasChainconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    chaintype: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal;
  return proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 4:
      var value = /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (reader.readEnum());
      msg.setChaintype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChaintype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string chainId = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ChainType chainType = 4;
 * @return {!proto.routerprotocol.routerchain.multichain.ChainType}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.getChaintype = function() {
  return /** @type {!proto.routerprotocol.routerchain.multichain.ChainType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.routerprotocol.routerchain.multichain.ChainType} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteChainConfigProposal.prototype.setChaintype = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractconfig: (f = msg.getContractconfig()) && multichain_chain_config_pb.ContractConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal;
  return proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new multichain_chain_config_pb.ContractConfig;
      reader.readMessage(value,multichain_chain_config_pb.ContractConfig.deserializeBinaryFromReader);
      msg.setContractconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      multichain_chain_config_pb.ContractConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ContractConfig contractConfig = 3;
 * @return {?proto.routerprotocol.routerchain.multichain.ContractConfig}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.getContractconfig = function() {
  return /** @type{?proto.routerprotocol.routerchain.multichain.ContractConfig} */ (
    jspb.Message.getWrapperField(this, multichain_chain_config_pb.ContractConfig, 3));
};


/**
 * @param {?proto.routerprotocol.routerchain.multichain.ContractConfig|undefined} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal} returns this
*/
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.setContractconfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.clearContractconfig = function() {
  return this.setContractconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.multichain.MultichainCreateContractConfigProposal.prototype.hasContractconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    contractconfig: (f = msg.getContractconfig()) && multichain_chain_config_pb.ContractConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal;
  return proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new multichain_chain_config_pb.ContractConfig;
      reader.readMessage(value,multichain_chain_config_pb.ContractConfig.deserializeBinaryFromReader);
      msg.setContractconfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getContractconfig();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      multichain_chain_config_pb.ContractConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ContractConfig contractConfig = 3;
 * @return {?proto.routerprotocol.routerchain.multichain.ContractConfig}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.getContractconfig = function() {
  return /** @type{?proto.routerprotocol.routerchain.multichain.ContractConfig} */ (
    jspb.Message.getWrapperField(this, multichain_chain_config_pb.ContractConfig, 3));
};


/**
 * @param {?proto.routerprotocol.routerchain.multichain.ContractConfig|undefined} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal} returns this
*/
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.setContractconfig = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.clearContractconfig = function() {
  return this.setContractconfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.multichain.MultichainUpdateContractConfigProposal.prototype.hasContractconfig = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    contractaddress: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal;
  return proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContractaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string chainId = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.getChainid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.setChainid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string contractAddress = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.getContractaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal} returns this
 */
proto.routerprotocol.routerchain.multichain.MultichainDeleteContractConfigProposal.prototype.setContractaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.multichain);
