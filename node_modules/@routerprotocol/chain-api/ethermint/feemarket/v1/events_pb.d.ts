// package: ethermint.feemarket.v1
// file: ethermint/feemarket/v1/events.proto

import * as jspb from "google-protobuf";

export class EventFeeMarket extends jspb.Message {
  getBaseFee(): string;
  setBaseFee(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventFeeMarket.AsObject;
  static toObject(includeInstance: boolean, msg: EventFeeMarket): EventFeeMarket.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventFeeMarket, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventFeeMarket;
  static deserializeBinaryFromReader(message: EventFeeMarket, reader: jspb.BinaryReader): EventFeeMarket;
}

export namespace EventFeeMarket {
  export type AsObject = {
    baseFee: string,
  }
}

export class EventBlockGas extends jspb.Message {
  getHeight(): string;
  setHeight(value: string): void;

  getAmount(): string;
  setAmount(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventBlockGas.AsObject;
  static toObject(includeInstance: boolean, msg: EventBlockGas): EventBlockGas.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventBlockGas, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventBlockGas;
  static deserializeBinaryFromReader(message: EventBlockGas, reader: jspb.BinaryReader): EventBlockGas;
}

export namespace EventBlockGas {
  export type AsObject = {
    height: string,
    amount: string,
  }
}

