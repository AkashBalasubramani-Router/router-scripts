// package: ethermint.evm.v1
// file: ethermint/evm/v1/events.proto

import * as jspb from "google-protobuf";

export class EventEthereumTx extends jspb.Message {
  getAmount(): string;
  setAmount(value: string): void;

  getEthHash(): string;
  setEthHash(value: string): void;

  getIndex(): string;
  setIndex(value: string): void;

  getGasUsed(): string;
  setGasUsed(value: string): void;

  getHash(): string;
  setHash(value: string): void;

  getRecipient(): string;
  setRecipient(value: string): void;

  getEthTxFailed(): string;
  setEthTxFailed(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventEthereumTx.AsObject;
  static toObject(includeInstance: boolean, msg: EventEthereumTx): EventEthereumTx.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventEthereumTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventEthereumTx;
  static deserializeBinaryFromReader(message: EventEthereumTx, reader: jspb.BinaryReader): EventEthereumTx;
}

export namespace EventEthereumTx {
  export type AsObject = {
    amount: string,
    ethHash: string,
    index: string,
    gasUsed: string,
    hash: string,
    recipient: string,
    ethTxFailed: string,
  }
}

export class EventTxLog extends jspb.Message {
  clearTxLogsList(): void;
  getTxLogsList(): Array<string>;
  setTxLogsList(value: Array<string>): void;
  addTxLogs(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventTxLog.AsObject;
  static toObject(includeInstance: boolean, msg: EventTxLog): EventTxLog.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventTxLog, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventTxLog;
  static deserializeBinaryFromReader(message: EventTxLog, reader: jspb.BinaryReader): EventTxLog;
}

export namespace EventTxLog {
  export type AsObject = {
    txLogsList: Array<string>,
  }
}

export class EventMessage extends jspb.Message {
  getModule(): string;
  setModule(value: string): void;

  getSender(): string;
  setSender(value: string): void;

  getTxType(): string;
  setTxType(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventMessage.AsObject;
  static toObject(includeInstance: boolean, msg: EventMessage): EventMessage.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventMessage, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventMessage;
  static deserializeBinaryFromReader(message: EventMessage, reader: jspb.BinaryReader): EventMessage;
}

export namespace EventMessage {
  export type AsObject = {
    module: string,
    sender: string,
    txType: string,
  }
}

export class EventBlockBloom extends jspb.Message {
  getBloom(): string;
  setBloom(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): EventBlockBloom.AsObject;
  static toObject(includeInstance: boolean, msg: EventBlockBloom): EventBlockBloom.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: EventBlockBloom, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): EventBlockBloom;
  static deserializeBinaryFromReader(message: EventBlockBloom, reader: jspb.BinaryReader): EventBlockBloom;
}

export namespace EventBlockBloom {
  export type AsObject = {
    bloom: string,
  }
}

