// package: ethermint.evm.v1
// file: ethermint/evm/v1/query.proto

var ethermint_evm_v1_query_pb = require("../../../ethermint/evm/v1/query_pb");
var ethermint_evm_v1_tx_pb = require("../../../ethermint/evm/v1/tx_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var Query = (function () {
  function Query() {}
  Query.serviceName = "ethermint.evm.v1.Query";
  return Query;
}());

Query.Account = {
  methodName: "Account",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryAccountRequest,
  responseType: ethermint_evm_v1_query_pb.QueryAccountResponse
};

Query.CosmosAccount = {
  methodName: "CosmosAccount",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryCosmosAccountRequest,
  responseType: ethermint_evm_v1_query_pb.QueryCosmosAccountResponse
};

Query.ValidatorAccount = {
  methodName: "ValidatorAccount",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryValidatorAccountRequest,
  responseType: ethermint_evm_v1_query_pb.QueryValidatorAccountResponse
};

Query.Balance = {
  methodName: "Balance",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryBalanceRequest,
  responseType: ethermint_evm_v1_query_pb.QueryBalanceResponse
};

Query.Storage = {
  methodName: "Storage",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryStorageRequest,
  responseType: ethermint_evm_v1_query_pb.QueryStorageResponse
};

Query.Code = {
  methodName: "Code",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryCodeRequest,
  responseType: ethermint_evm_v1_query_pb.QueryCodeResponse
};

Query.Params = {
  methodName: "Params",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryParamsRequest,
  responseType: ethermint_evm_v1_query_pb.QueryParamsResponse
};

Query.EthCall = {
  methodName: "EthCall",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.EthCallRequest,
  responseType: ethermint_evm_v1_tx_pb.MsgEthereumTxResponse
};

Query.EstimateGas = {
  methodName: "EstimateGas",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.EthCallRequest,
  responseType: ethermint_evm_v1_query_pb.EstimateGasResponse
};

Query.TraceTx = {
  methodName: "TraceTx",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryTraceTxRequest,
  responseType: ethermint_evm_v1_query_pb.QueryTraceTxResponse
};

Query.TraceBlock = {
  methodName: "TraceBlock",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryTraceBlockRequest,
  responseType: ethermint_evm_v1_query_pb.QueryTraceBlockResponse
};

Query.BaseFee = {
  methodName: "BaseFee",
  service: Query,
  requestStream: false,
  responseStream: false,
  requestType: ethermint_evm_v1_query_pb.QueryBaseFeeRequest,
  responseType: ethermint_evm_v1_query_pb.QueryBaseFeeResponse
};

exports.Query = Query;

function QueryClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

QueryClient.prototype.account = function account(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Account, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.cosmosAccount = function cosmosAccount(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.CosmosAccount, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.validatorAccount = function validatorAccount(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.ValidatorAccount, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.balance = function balance(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Balance, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.storage = function storage(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Storage, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.code = function code(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Code, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.params = function params(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.Params, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.ethCall = function ethCall(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.EthCall, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.estimateGas = function estimateGas(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.EstimateGas, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.traceTx = function traceTx(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TraceTx, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.traceBlock = function traceBlock(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.TraceBlock, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

QueryClient.prototype.baseFee = function baseFee(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(Query.BaseFee, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.QueryClient = QueryClient;

