// package: routerprotocol.routerchain.types
// file: types/tx_service.proto

var types_tx_service_pb = require("../types/tx_service_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var RouterTxRpc = (function () {
  function RouterTxRpc() {}
  RouterTxRpc.serviceName = "routerprotocol.routerchain.types.RouterTxRpc";
  return RouterTxRpc;
}());

RouterTxRpc.GetTx = {
  methodName: "GetTx",
  service: RouterTxRpc,
  requestStream: false,
  responseStream: false,
  requestType: types_tx_service_pb.GetTxRequest,
  responseType: types_tx_service_pb.GetTxResponse
};

RouterTxRpc.PrepareTx = {
  methodName: "PrepareTx",
  service: RouterTxRpc,
  requestStream: false,
  responseStream: false,
  requestType: types_tx_service_pb.PrepareTxRequest,
  responseType: types_tx_service_pb.PrepareTxResponse
};

RouterTxRpc.BroadcastTx = {
  methodName: "BroadcastTx",
  service: RouterTxRpc,
  requestStream: false,
  responseStream: false,
  requestType: types_tx_service_pb.BroadcastTxRequest,
  responseType: types_tx_service_pb.BroadcastTxResponse
};

exports.RouterTxRpc = RouterTxRpc;

function RouterTxRpcClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

RouterTxRpcClient.prototype.getTx = function getTx(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RouterTxRpc.GetTx, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RouterTxRpcClient.prototype.prepareTx = function prepareTx(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RouterTxRpc.PrepareTx, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

RouterTxRpcClient.prototype.broadcastTx = function broadcastTx(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(RouterTxRpc.BroadcastTx, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.RouterTxRpcClient = RouterTxRpcClient;

