// source: types/tx_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

var google_api_annotations_pb = require('../google/api/annotations_pb.js');
goog.object.extend(proto, google_api_annotations_pb);
var cosmos_base_abci_v1beta1_abci_pb = require('../cosmos/base/abci/v1beta1/abci_pb.js');
goog.object.extend(proto, cosmos_base_abci_v1beta1_abci_pb);
var cosmos_tx_v1beta1_tx_pb = require('../cosmos/tx/v1beta1/tx_pb.js');
goog.object.extend(proto, cosmos_tx_v1beta1_tx_pb);
var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var cosmos_base_query_v1beta1_pagination_pb = require('../cosmos/base/query/v1beta1/pagination_pb.js');
goog.object.extend(proto, cosmos_base_query_v1beta1_pagination_pb);
goog.exportSymbol('proto.routerprotocol.routerchain.types.BroadcastTxRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.BroadcastTxResponse', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.CosmosCoin', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.CosmosPubKey', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.CosmosTxFee', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.GetTxRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.GetTxResponse', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.PrepareTxRequest', null, global);
goog.exportSymbol('proto.routerprotocol.routerchain.types.PrepareTxResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.GetTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.GetTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.GetTxRequest.displayName = 'proto.routerprotocol.routerchain.types.GetTxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.GetTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.GetTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.GetTxResponse.displayName = 'proto.routerprotocol.routerchain.types.GetTxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.routerprotocol.routerchain.types.PrepareTxRequest.repeatedFields_, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.PrepareTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.PrepareTxRequest.displayName = 'proto.routerprotocol.routerchain.types.PrepareTxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.CosmosTxFee = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.routerprotocol.routerchain.types.CosmosTxFee.repeatedFields_, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.CosmosTxFee, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.CosmosTxFee.displayName = 'proto.routerprotocol.routerchain.types.CosmosTxFee';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.CosmosCoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.CosmosCoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.CosmosCoin.displayName = 'proto.routerprotocol.routerchain.types.CosmosCoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.PrepareTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.PrepareTxResponse.displayName = 'proto.routerprotocol.routerchain.types.PrepareTxResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.routerprotocol.routerchain.types.BroadcastTxRequest.repeatedFields_, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.BroadcastTxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.BroadcastTxRequest.displayName = 'proto.routerprotocol.routerchain.types.BroadcastTxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.CosmosPubKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.CosmosPubKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.CosmosPubKey.displayName = 'proto.routerprotocol.routerchain.types.CosmosPubKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.routerprotocol.routerchain.types.BroadcastTxResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.routerprotocol.routerchain.types.BroadcastTxResponse.displayName = 'proto.routerprotocol.routerchain.types.BroadcastTxResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.GetTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.GetTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.GetTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.GetTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.GetTxRequest}
 */
proto.routerprotocol.routerchain.types.GetTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.GetTxRequest;
  return proto.routerprotocol.routerchain.types.GetTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.GetTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.GetTxRequest}
 */
proto.routerprotocol.routerchain.types.GetTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.GetTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.GetTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.GetTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.GetTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.GetTxRequest.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.GetTxRequest.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.GetTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.GetTxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.GetTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    codespace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    code: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    rawLog: jspb.Message.getFieldWithDefault(msg, 7, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.GetTxResponse;
  return proto.routerprotocol.routerchain.types.GetTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.GetTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodespace(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawLog(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.GetTxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.GetTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.GetTxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getRawLog();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 height = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string codespace = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setCodespace = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 code = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string raw_log = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getRawLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setRawLog = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string timestamp = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.GetTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.GetTxResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.PrepareTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.PrepareTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    signerAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 3, 0),
    memo: jspb.Message.getFieldWithDefault(msg, 4, ""),
    timeoutHeight: jspb.Message.getFieldWithDefault(msg, 5, 0),
    fee: (f = msg.getFee()) && proto.routerprotocol.routerchain.types.CosmosTxFee.toObject(includeInstance, f),
    msgsList: msg.getMsgsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.PrepareTxRequest;
  return proto.routerprotocol.routerchain.types.PrepareTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.PrepareTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignerAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimeoutHeight(value);
      break;
    case 6:
      var value = new proto.routerprotocol.routerchain.types.CosmosTxFee;
      reader.readMessage(value,proto.routerprotocol.routerchain.types.CosmosTxFee.deserializeBinaryFromReader);
      msg.setFee(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMsgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.PrepareTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.PrepareTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSignerAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTimeoutHeight();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getFee();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.routerprotocol.routerchain.types.CosmosTxFee.serializeBinaryToWriter
    );
  }
  f = message.getMsgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      7,
      f
    );
  }
};


/**
 * optional uint64 chain_id = 1;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.setChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string signer_address = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getSignerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.setSignerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 sequence = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 timeout_height = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getTimeoutHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.setTimeoutHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional CosmosTxFee fee = 6;
 * @return {?proto.routerprotocol.routerchain.types.CosmosTxFee}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getFee = function() {
  return /** @type{?proto.routerprotocol.routerchain.types.CosmosTxFee} */ (
    jspb.Message.getWrapperField(this, proto.routerprotocol.routerchain.types.CosmosTxFee, 6));
};


/**
 * @param {?proto.routerprotocol.routerchain.types.CosmosTxFee|undefined} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
*/
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.setFee = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.clearFee = function() {
  return this.setFee(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.hasFee = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated bytes msgs = 7;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getMsgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * repeated bytes msgs = 7;
 * This is a type-conversion wrapper around `getMsgsList()`
 * @return {!Array<string>}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getMsgsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getMsgsList()));
};


/**
 * repeated bytes msgs = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.getMsgsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMsgsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.setMsgsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.addMsgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxRequest.prototype.clearMsgsList = function() {
  return this.setMsgsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.CosmosTxFee.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.CosmosTxFee} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.toObject = function(includeInstance, msg) {
  var f, obj = {
    priceList: jspb.Message.toObjectList(msg.getPriceList(),
    proto.routerprotocol.routerchain.types.CosmosCoin.toObject, includeInstance),
    gas: jspb.Message.getFieldWithDefault(msg, 2, 0),
    delegateFee: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.CosmosTxFee}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.CosmosTxFee;
  return proto.routerprotocol.routerchain.types.CosmosTxFee.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.CosmosTxFee} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.CosmosTxFee}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.routerprotocol.routerchain.types.CosmosCoin;
      reader.readMessage(value,proto.routerprotocol.routerchain.types.CosmosCoin.deserializeBinaryFromReader);
      msg.addPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGas(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDelegateFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.CosmosTxFee.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.CosmosTxFee} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPriceList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.routerprotocol.routerchain.types.CosmosCoin.serializeBinaryToWriter
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDelegateFee();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated CosmosCoin price = 1;
 * @return {!Array<!proto.routerprotocol.routerchain.types.CosmosCoin>}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.getPriceList = function() {
  return /** @type{!Array<!proto.routerprotocol.routerchain.types.CosmosCoin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.routerprotocol.routerchain.types.CosmosCoin, 1));
};


/**
 * @param {!Array<!proto.routerprotocol.routerchain.types.CosmosCoin>} value
 * @return {!proto.routerprotocol.routerchain.types.CosmosTxFee} returns this
*/
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.setPriceList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.routerprotocol.routerchain.types.CosmosCoin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.routerprotocol.routerchain.types.CosmosCoin}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.addPrice = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.routerprotocol.routerchain.types.CosmosCoin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.routerprotocol.routerchain.types.CosmosTxFee} returns this
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.clearPriceList = function() {
  return this.setPriceList([]);
};


/**
 * optional uint64 gas = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.CosmosTxFee} returns this
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool delegate_fee = 3;
 * @return {boolean}
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.getDelegateFee = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.routerprotocol.routerchain.types.CosmosTxFee} returns this
 */
proto.routerprotocol.routerchain.types.CosmosTxFee.prototype.setDelegateFee = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.CosmosCoin.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.CosmosCoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.CosmosCoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.CosmosCoin.toObject = function(includeInstance, msg) {
  var f, obj = {
    denom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.CosmosCoin}
 */
proto.routerprotocol.routerchain.types.CosmosCoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.CosmosCoin;
  return proto.routerprotocol.routerchain.types.CosmosCoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.CosmosCoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.CosmosCoin}
 */
proto.routerprotocol.routerchain.types.CosmosCoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDenom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.CosmosCoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.CosmosCoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.CosmosCoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.CosmosCoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string denom = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.CosmosCoin.prototype.getDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.CosmosCoin} returns this
 */
proto.routerprotocol.routerchain.types.CosmosCoin.prototype.setDenom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string amount = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.CosmosCoin.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.CosmosCoin} returns this
 */
proto.routerprotocol.routerchain.types.CosmosCoin.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.PrepareTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.PrepareTxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sequence: jspb.Message.getFieldWithDefault(msg, 2, 0),
    signMode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pubKeyType: jspb.Message.getFieldWithDefault(msg, 4, ""),
    feePayer: jspb.Message.getFieldWithDefault(msg, 5, ""),
    feePayerSig: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.PrepareTxResponse;
  return proto.routerprotocol.routerchain.types.PrepareTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.PrepareTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSequence(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignMode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubKeyType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayer(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayerSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.PrepareTxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.PrepareTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSequence();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSignMode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPubKeyType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFeePayer();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFeePayerSig();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 sequence = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.getSequence = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.setSequence = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string sign_mode = 3;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.getSignMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.setSignMode = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string pub_key_type = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.getPubKeyType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.setPubKeyType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string fee_payer = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.getFeePayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.setFeePayer = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string fee_payer_sig = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.getFeePayerSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.PrepareTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.PrepareTxResponse.prototype.setFeePayerSig = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.BroadcastTxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    tx: msg.getTx_asB64(),
    msgsList: msg.getMsgsList_asB64(),
    pubKey: (f = msg.getPubKey()) && proto.routerprotocol.routerchain.types.CosmosPubKey.toObject(includeInstance, f),
    signature: jspb.Message.getFieldWithDefault(msg, 5, ""),
    feePayer: jspb.Message.getFieldWithDefault(msg, 6, ""),
    feePayerSig: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mode: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.BroadcastTxRequest;
  return proto.routerprotocol.routerchain.types.BroadcastTxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChainId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTx(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMsgs(value);
      break;
    case 4:
      var value = new proto.routerprotocol.routerchain.types.CosmosPubKey;
      reader.readMessage(value,proto.routerprotocol.routerchain.types.CosmosPubKey.deserializeBinaryFromReader);
      msg.setPubKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayer(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeePayerSig(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.BroadcastTxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainId();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTx_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMsgsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.routerprotocol.routerchain.types.CosmosPubKey.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFeePayer();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getFeePayerSig();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMode();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint64 chain_id = 1;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes tx = 2;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getTx = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes tx = 2;
 * This is a type-conversion wrapper around `getTx()`
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getTx_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTx()));
};


/**
 * optional bytes tx = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTx()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getTx_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTx()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setTx = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes msgs = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getMsgsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes msgs = 3;
 * This is a type-conversion wrapper around `getMsgsList()`
 * @return {!Array<string>}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getMsgsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getMsgsList()));
};


/**
 * repeated bytes msgs = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getMsgsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMsgsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setMsgsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.addMsgs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.clearMsgsList = function() {
  return this.setMsgsList([]);
};


/**
 * optional CosmosPubKey pub_key = 4;
 * @return {?proto.routerprotocol.routerchain.types.CosmosPubKey}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getPubKey = function() {
  return /** @type{?proto.routerprotocol.routerchain.types.CosmosPubKey} */ (
    jspb.Message.getWrapperField(this, proto.routerprotocol.routerchain.types.CosmosPubKey, 4));
};


/**
 * @param {?proto.routerprotocol.routerchain.types.CosmosPubKey|undefined} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
*/
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signature = 5;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string fee_payer = 6;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getFeePayer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setFeePayer = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string fee_payer_sig = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getFeePayerSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setFeePayerSig = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mode = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.getMode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxRequest} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.CosmosPubKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.CosmosPubKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.CosmosPubKey}
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.CosmosPubKey;
  return proto.routerprotocol.routerchain.types.CosmosPubKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.CosmosPubKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.CosmosPubKey}
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.CosmosPubKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.CosmosPubKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.CosmosPubKey} returns this
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.CosmosPubKey} returns this
 */
proto.routerprotocol.routerchain.types.CosmosPubKey.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.routerprotocol.routerchain.types.BroadcastTxResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    txHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    height: jspb.Message.getFieldWithDefault(msg, 2, 0),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    codespace: jspb.Message.getFieldWithDefault(msg, 4, ""),
    code: jspb.Message.getFieldWithDefault(msg, 5, 0),
    data: msg.getData_asB64(),
    rawLog: jspb.Message.getFieldWithDefault(msg, 7, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.routerprotocol.routerchain.types.BroadcastTxResponse;
  return proto.routerprotocol.routerchain.types.BroadcastTxResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readSint64());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodespace(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawLog(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.routerprotocol.routerchain.types.BroadcastTxResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeSint64(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getCodespace();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCode();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getRawLog();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string tx_hash = 1;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setTxHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional sint64 height = 2;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string codespace = 4;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getCodespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setCodespace = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 code = 5;
 * @return {number}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setCode = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes data = 6;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional string raw_log = 7;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getRawLog = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setRawLog = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string timestamp = 8;
 * @return {string}
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.routerprotocol.routerchain.types.BroadcastTxResponse} returns this
 */
proto.routerprotocol.routerchain.types.BroadcastTxResponse.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


goog.object.extend(exports, proto.routerprotocol.routerchain.types);
